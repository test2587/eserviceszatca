/*
list of files
 jquery.plugin.js
 jquery.calendars.min
 jquery.calendars-ar
 jquery.calendars.plus.min
 jquery.calendars.picker.min
 jquery.calendars.islamic.min
 jquery.calendars.islamic-ar
 jquery.calendars.ummalqura.min
 jquery.calendars.ummalqura-ar

 */

// ----------------------- 1.jquery.plugin.js  -----------------------  //
(function () {
  "use strict";
  var initializing = false;

  // The base JQClass implementation (does nothing)
  window.JQClass = function () {};

  // Collection of derived classes
  JQClass.classes = {};

  // Create a new JQClass that inherits from this class
  JQClass.extend = function extender(prop) {
    var base = this.prototype;

    // Instantiate a base class (but only create the instance, don't run the init constructor)
    initializing = true;
    var prototype = new this();
    initializing = false;

    // Copy the properties over onto the new prototype
    for (var name in prop) {
      // jshint loopfunc:true
      // Check if we're overwriting an existing function
      if (
        typeof prop[name] === "function" &&
        typeof base[name] === "function"
      ) {
        prototype[name] = (function (name, fn) {
          return function () {
            var __super = this._super;
            // Add a new ._super() method that is the same method but on the super-class
            this._super = function (args) {
              return base[name].apply(this, args || []);
            };
            var ret = fn.apply(this, arguments);
            // The method only needs to be bound temporarily, so we remove it when we're done executing
            this._super = __super;
            return ret;
          };
        })(name, prop[name]);
        // Check if we're overwriting existing default options.
      } else if (
        typeof prop[name] === "object" &&
        typeof base[name] === "object" &&
        name === "defaultOptions"
      ) {
        var obj1 = base[name];
        var obj2 = prop[name];
        var obj3 = {};
        var key;
        for (key in obj1) {
          // jshint forin:false
          obj3[key] = obj1[key];
        }
        for (key in obj2) {
          // jshint forin:false
          obj3[key] = obj2[key];
        }
        prototype[name] = obj3;
      } else {
        prototype[name] = prop[name];
      }
    }

    // The dummy class constructor
    function JQClass() {
      // All construction is actually done in the init method
      if (!initializing && this._init) {
        this._init.apply(this, arguments);
      }
    }

    // Populate our constructed prototype object
    JQClass.prototype = prototype;

    // Enforce the constructor to be what we expect
    JQClass.prototype.constructor = JQClass;

    // And make this class extendable
    JQClass.extend = extender;

    return JQClass;
  };
})();
(function ($) {
  // Ensure $, encapsulate
  "use strict";

  /** <p>Abstract base class for collection plugins v1.0.2.</p>
		<p>Written by Keith Wood (wood.keith{at}optusnet.com.au) December 2013.</p>
		<p>Licensed under the MIT license (http://keith-wood.name/licence.html).</p>
		<p>Use {@link $.JQPlugin.createPlugin} to create new plugins using this framework.</p>
		<p>This base class provides common functionality such as:</p>
		<ul>
			<li>Creates jQuery bridge - allowing you to invoke your plugin on a collection of elements.</li>
			<li>Handles initialisation including reading settings from metadata -
				an instance object is attached to the affected element(s) containing all the necessary data.</li>
			<li>Handles option retrieval and update - options can be set through default values,
				through inline metadata, or through instantiation settings.<br>
				Metadata is specified as an attribute on the element:
				<code>data-&lt;pluginName>="&lt;option name>: '&lt;value>', ..."</code>.
				Dates should be specified as strings in this format: <code>'new Date(y, m-1, d)'</code>.</li>
			<li>Handles method calling - inner functions starting with '_'are inaccessible,
				whereas others can be called via <code>$(selector).pluginName('functionName')</code>.</li>
			<li>Handles plugin destruction - removing all trace of the plugin.</li>
		</ul>
		@module JQPlugin
		@abstract */
  JQClass.classes.JQPlugin = JQClass.extend({
    /** Name to identify this plugin.
			@example name: 'tabs' */
    name: "plugin",

    /** Default options for instances of this plugin (default: {}).
			@example defaultOptions: {
  selectedClass: 'selected',
  triggers: 'click'
} */
    defaultOptions: {},

    /** Options dependent on the locale.
			Indexed by language and (optional) country code, with '' denoting the default language (English/US).
			Normally additional languages would be provided as separate files to all them to be included as needed.
			@example regionalOptions: {
  '': {
    greeting: 'Hi'
  }
} */
    regionalOptions: {},

    /** Whether or not a deep merge should be performed when accumulating options.
			The default is <code>true</code> but can be overridden in a sub-class. */
    deepMerge: true,

    /** Retrieve a marker class for affected elements.
			In the format: <code>is-&lt;pluginName&gt;</code>.
			@protected
			@return {string} The marker class. */
    _getMarker: function () {
      return "is-" + this.name;
    },

    /** Initialise the plugin.
			Create the jQuery bridge - plugin name <code>xyz</code>
			produces singleton <code>$.xyz</code> and collection function <code>$.fn.xyz</code>.
			@protected */
    _init: function () {
      // Apply default localisations
      $.extend(
        this.defaultOptions,
        (this.regionalOptions && this.regionalOptions[""]) || {}
      );
      // Camel-case the name
      var jqName = camelCase(this.name);
      // Expose jQuery singleton manager
      $[jqName] = this;
      // Expose jQuery collection plugin
      $.fn[jqName] = function (options) {
        var otherArgs = Array.prototype.slice.call(arguments, 1);
        var inst = this;
        var returnValue = this;
        this.each(function () {
          if (typeof options === "string") {
            if (options[0] === "_" || !$[jqName][options]) {
              throw "Unknown method: " + options;
            }
            var methodValue = $[jqName][options].apply(
              $[jqName],
              [this].concat(otherArgs)
            );
            if (methodValue !== inst && methodValue !== undefined) {
              returnValue = methodValue;
              return false;
            }
          } else {
            $[jqName]._attach(this, options);
          }
        });
        return returnValue;
      };
    },

    /** Set default options for all subsequent instances.
			@param {object} options The new default options.
			@example $.pluginName.setDefaults({name: value, ...}) */
    setDefaults: function (options) {
      $.extend(this.defaultOptions, options || {});
    },

    /** Initialise an element. Called internally only.
			Adds an instance object as data named for the plugin.
			Override {@linkcode module:JQPlugin~_postAttach|_postAttach} for plugin-specific processing.
			@private
			@param {Element} elem The element to enhance.
			@param {object} options Overriding settings. */
    _attach: function (elem, options) {
      elem = $(elem);
      if (elem.hasClass(this._getMarker())) {
        return;
      }
      elem.addClass(this._getMarker());
      options = $.extend(
        this.deepMerge,
        {},
        this.defaultOptions,
        this._getMetadata(elem),
        options || {}
      );
      var inst = $.extend(
        { name: this.name, elem: elem, options: options },
        this._instSettings(elem, options)
      );
      elem.data(this.name, inst); // Save instance against element
      this._postAttach(elem, inst);
      this.option(elem, options);
    },

    /** Retrieve additional instance settings.
			Override this in a sub-class to provide extra settings.
			These are added directly to the instance object.
			Default attributes of an instance object are shown as properties below:
			@protected
			@param {jQuery} elem The current jQuery element.
			@param {object} options The instance options.
			@return {object} Any extra instance values.
			@property {Element} elem The element to which this instance applies.
			@property {string} name The name of this plugin.
			@property {object} options The accumulated options for this instance.
			@example _instSettings: function(elem, options) {
  return {nav: elem.find(options.navSelector)};
} */
    _instSettings: function (elem, options) {
      // jshint unused:false
      return {};
    },

    /** Plugin specific post initialisation.
			Override this in a sub-class to perform extra activities.
			This is where you would implement your plugin's main functionality.
			@protected
			@param {jQuery} elem The current jQuery element.
			@param {object} inst The instance settings.
			@example _postAttach: function(elem, inst) {
  elem.on('click.' + this.name, function() {
    ...
  });
} */
    _postAttach: function (elem, inst) {
      // jshint unused:false
    },

    /** Retrieve metadata configuration from the element.
			Metadata is specified as an attribute:
			<code>data-&lt;pluginName>="&lt;option name>: '&lt;value>', ..."</code>.
			Dates should be specified as strings in this format: <code>'new Date(y, m-1, d)'</code>.
			@private
			@param {jQuery} elem The source element.
			@return {object} The inline configuration or {}. */
    _getMetadata: function (elem) {
      try {
        var data = elem.data(this.name.toLowerCase()) || "";
        data = data
          .replace(/(\\?)'/g, function (e, t) {
            return t ? "'" : '"';
          })
          .replace(/([a-zA-Z0-9]+):/g, function (match, group, i) {
            var count = data.substring(0, i).match(/"/g); // Handle embedded ':'
            return !count || count.length % 2 === 0
              ? '"' + group + '":'
              : group + ":";
          })
          .replace(/\\:/g, ":");
        data = $.parseJSON("{" + data + "}");
        for (var key in data) {
          if (data.hasOwnProperty(key)) {
            var value = data[key];
            if (
              typeof value === "string" &&
              value.match(/^new Date\(([-0-9,\s]*)\)$/)
            ) {
              // Convert dates
              data[key] = eval(value); // jshint ignore:line
            }
          }
        }
        return data;
      } catch (e) {
        return {};
      }
    },

    /** Retrieve the instance data for element.
			@protected
			@param {Element} elem The source element.
			@return {object} The instance data or <code>{}</code> if none. */
    _getInst: function (elem) {
      return $(elem).data(this.name) || {};
    },

    /** Retrieve or reconfigure the settings for a plugin.
			If new settings are provided they are applied to the instance options.
			If an option name only is provided the value of that option is returned.
			If no name or value is provided, all options are returned.
			Override {@linkcode module:JQPlugin~_optionsChanged|_optionsChanged}
			for plugin-specific processing when option values change.
			@param {Element} elem The source element.
			@param {object|string} [name] The collection of new option values or the name of a single option.
			@param {any} [value] The value for a single named option.
			@return {any|object} If retrieving a single value or all options.
			@example $(selector).plugin('option', 'name', value) // Set one option
$(selector).plugin('option', {name: value, ...}) // Set multiple options
var value = $(selector).plugin('option', 'name') // Get one option
var options = $(selector).plugin('option') // Get all options */
    option: function (elem, name, value) {
      elem = $(elem);
      var inst = elem.data(this.name);
      var options = name || {};
      if (!name || (typeof name === "string" && typeof value === "undefined")) {
        options = (inst || {}).options;
        return options && name ? options[name] : options;
      }
      if (!elem.hasClass(this._getMarker())) {
        return;
      }
      if (typeof name === "string") {
        options = {};
        options[name] = value;
      }
      this._optionsChanged(elem, inst, options);
      $.extend(inst.options, options);
    },

    /** Plugin specific options processing.
			Old value available in <code>inst.options[name]</code>, new value in <code>options[name]</code>.
			Override this in a sub-class to perform extra activities.
			@protected
			@param {jQuery} elem The current jQuery element.
			@param {object} inst The instance settings.
			@param {object} options The new options.
			@example _optionsChanged: function(elem, inst, options) {
  if (options.name != inst.options.name) {
    elem.removeClass(inst.options.name).addClass(options.name);
  }
} */
    _optionsChanged: function (elem, inst, options) {
      // jshint unused:false
    },

    /** Remove all trace of the plugin.
			Override {@linkcode module:JQPlugin~_preDestroy|_preDestroy} for plugin-specific processing.
			@param {Element} elem The source element.
			@example $(selector).plugin('destroy') */
    destroy: function (elem) {
      elem = $(elem);
      if (!elem.hasClass(this._getMarker())) {
        return;
      }
      this._preDestroy(elem, this._getInst(elem));
      elem.removeData(this.name).removeClass(this._getMarker());
    },

    /** Plugin specific pre destruction.
			It is invoked as part of the {@linkcode module:JQPlugin~destroy|destroy} processing.
			Override this in a sub-class to perform extra activities and undo everything that was
			done in the {@linkcode module:JQPlugin~_postAttach|_postAttach} or
			{@linkcode module:JQPlugin~_optionsChanged|_optionsChanged} functions.
			@protected
			@param {jQuery} elem The current jQuery element.
			@param {object} inst The instance settings.
			@example _preDestroy: function(elem, inst) {
  elem.off('.' + this.name);
} */
    _preDestroy: function (elem, inst) {
      // jshint unused:false
    },
  });

  /** Convert names from hyphenated to camel-case.
		@private
		@param {string} value The original hyphenated name.
		@return {string} The camel-case version. */
  function camelCase(name) {
    return name.replace(/-([a-z])/g, function (match, group) {
      return group.toUpperCase();
    });
  }

  /** Expose the plugin base.
		@namespace $.JQPlugin */
  $.JQPlugin = {
    /** Create a new collection plugin.
			@memberof $.JQPlugin
			@param {string} [superClass='JQPlugin'] The name of the parent class to inherit from.
			@param {object} overrides The property/function overrides for the new class.
				See {@link module:JQPlugin|JQPlugin} for the base functionality.
			@example $.JQPlugin.createPlugin({ // Define the plugin
  name: 'tabs',
  defaultOptions: {selectedClass: 'selected'},
  _initSettings: function(elem, options) { return {...}; },
  _postAttach: function(elem, inst) { ... }
});
$('selector').tabs(); // And instantiate it */
    createPlugin: function (superClass, overrides) {
      if (typeof superClass === "object") {
        overrides = superClass;
        superClass = "JQPlugin";
      }
      superClass = camelCase(superClass);
      var className = camelCase(overrides.name);
      JQClass.classes[className] =
        JQClass.classes[superClass].extend(overrides);
      new JQClass.classes[className](); // jshint ignore:line
    },
  };
})(jQuery);

// ----------------------- 2.jquery.calendars.min.js  -----------------------  //
!(function (a) {
  "use strict";
  function b() {
    (this.regionalOptions = []),
      (this.regionalOptions[""] = {
        invalidCalendar: "Calendar {0} not found",
        invalidDate: "Invalid {0} date",
        invalidMonth: "Invalid {0} month",
        invalidYear: "Invalid {0} year",
        differentCalendars: "Cannot mix {0} and {1} dates",
      }),
      (this.local = this.regionalOptions[""]),
      (this.calendars = {}),
      (this._localCals = {});
  }
  function c(b, c, d, e) {
    if (
      ((this._calendar = b),
      (this._year = c),
      (this._month = d),
      (this._day = e),
      0 === this._calendar._validateLevel &&
        !this._calendar.isValid(this._year, this._month, this._day))
    )
      throw (
        a.calendars.local.invalidDate ||
        a.calendars.regionalOptions[""].invalidDate
      ).replace(/\{0\}/, this._calendar.local.name);
  }
  function d(a, b) {
    return (a = "" + a), "000000".substring(0, b - a.length) + a;
  }
  function e() {
    this.shortYearCutoff = "+10";
  }
  function f(a) {
    this.local = this.regionalOptions[a] || this.regionalOptions[""];
  }
  a.extend(b.prototype, {
    instance: function (a, b) {
      (a = (a || "gregorian").toLowerCase()), (b = b || "");
      var c = this._localCals[a + "-" + b];
      if (
        (!c &&
          this.calendars[a] &&
          ((c = new this.calendars[a](b)), (this._localCals[a + "-" + b] = c)),
        !c)
      )
        throw (
          this.local.invalidCalendar || this.regionalOptions[""].invalidCalendar
        ).replace(/\{0\}/, a);
      return c;
    },
    newDate: function (a, b, c, d, e) {
      return (
        (d =
          ("undefined" != typeof a && null !== a && a.year
            ? a.calendar()
            : "string" == typeof d
            ? this.instance(d, e)
            : d) || this.instance()),
        d.newDate(a, b, c)
      );
    },
    substituteDigits: function (a) {
      return function (b) {
        return (b + "").replace(/[0-9]/g, function (b) {
          return a[b];
        });
      };
    },
    substituteChineseDigits: function (a, b) {
      return function (c) {
        for (var d = "", e = 0; c > 0; ) {
          var f = c % 10;
          (d = (0 === f ? "" : a[f] + b[e]) + d), e++, (c = Math.floor(c / 10));
        }
        return 0 === d.indexOf(a[1] + b[1]) && (d = d.substr(1)), d || a[0];
      };
    },
  }),
    a.extend(c.prototype, {
      newDate: function (a, b, c) {
        return this._calendar.newDate(
          "undefined" == typeof a || null === a ? this : a,
          b,
          c
        );
      },
      year: function (a) {
        return 0 === arguments.length ? this._year : this.set(a, "y");
      },
      month: function (a) {
        return 0 === arguments.length ? this._month : this.set(a, "m");
      },
      day: function (a) {
        return 0 === arguments.length ? this._day : this.set(a, "d");
      },
      date: function (b, c, d) {
        if (!this._calendar.isValid(b, c, d))
          throw (
            a.calendars.local.invalidDate ||
            a.calendars.regionalOptions[""].invalidDate
          ).replace(/\{0\}/, this._calendar.local.name);
        return (this._year = b), (this._month = c), (this._day = d), this;
      },
      leapYear: function () {
        return this._calendar.leapYear(this);
      },
      epoch: function () {
        return this._calendar.epoch(this);
      },
      formatYear: function () {
        return this._calendar.formatYear(this);
      },
      monthOfYear: function () {
        return this._calendar.monthOfYear(this);
      },
      weekOfYear: function () {
        return this._calendar.weekOfYear(this);
      },
      daysInYear: function () {
        return this._calendar.daysInYear(this);
      },
      dayOfYear: function () {
        return this._calendar.dayOfYear(this);
      },
      daysInMonth: function () {
        return this._calendar.daysInMonth(this);
      },
      dayOfWeek: function () {
        return this._calendar.dayOfWeek(this);
      },
      weekDay: function () {
        return this._calendar.weekDay(this);
      },
      extraInfo: function () {
        return this._calendar.extraInfo(this);
      },
      add: function (a, b) {
        return this._calendar.add(this, a, b);
      },
      set: function (a, b) {
        return this._calendar.set(this, a, b);
      },
      compareTo: function (b) {
        if (this._calendar.name !== b._calendar.name)
          throw (
            a.calendars.local.differentCalendars ||
            a.calendars.regionalOptions[""].differentCalendars
          )
            .replace(/\{0\}/, this._calendar.local.name)
            .replace(/\{1\}/, b._calendar.local.name);
        var c =
          this._year !== b._year
            ? this._year - b._year
            : this._month !== b._month
            ? this.monthOfYear() - b.monthOfYear()
            : this._day - b._day;
        return 0 === c ? 0 : c < 0 ? -1 : 1;
      },
      calendar: function () {
        return this._calendar;
      },
      toJD: function () {
        return this._calendar.toJD(this);
      },
      fromJD: function (a) {
        return this._calendar.fromJD(a);
      },
      toJSDate: function () {
        return this._calendar.toJSDate(this);
      },
      fromJSDate: function (a) {
        return this._calendar.fromJSDate(a);
      },
      toString: function () {
        return (
          (this.year() < 0 ? "-" : "") +
          d(Math.abs(this.year()), 4) +
          "-" +
          d(this.month(), 2) +
          "-" +
          d(this.day(), 2)
        );
      },
    }),
    a.extend(e.prototype, {
      _validateLevel: 0,
      newDate: function (b, d, e) {
        return "undefined" == typeof b || null === b
          ? this.today()
          : (b.year &&
              (this._validate(
                b,
                d,
                e,
                a.calendars.local.invalidDate ||
                  a.calendars.regionalOptions[""].invalidDate
              ),
              (e = b.day()),
              (d = b.month()),
              (b = b.year())),
            new c(this, b, d, e));
      },
      today: function () {
        return this.fromJSDate(new Date());
      },
      epoch: function (b) {
        var c = this._validate(
          b,
          this.minMonth,
          this.minDay,
          a.calendars.local.invalidYear ||
            a.calendars.regionalOptions[""].invalidYear
        );
        return c.year() < 0 ? this.local.epochs[0] : this.local.epochs[1];
      },
      formatYear: function (b) {
        var c = this._validate(
          b,
          this.minMonth,
          this.minDay,
          a.calendars.local.invalidYear ||
            a.calendars.regionalOptions[""].invalidYear
        );
        return (c.year() < 0 ? "-" : "") + d(Math.abs(c.year()), 4);
      },
      monthsInYear: function (b) {
        return (
          this._validate(
            b,
            this.minMonth,
            this.minDay,
            a.calendars.local.invalidYear ||
              a.calendars.regionalOptions[""].invalidYear
          ),
          12
        );
      },
      monthOfYear: function (b, c) {
        var d = this._validate(
          b,
          c,
          this.minDay,
          a.calendars.local.invalidMonth ||
            a.calendars.regionalOptions[""].invalidMonth
        );
        return (
          ((d.month() + this.monthsInYear(d) - this.firstMonth) %
            this.monthsInYear(d)) +
          this.minMonth
        );
      },
      fromMonthOfYear: function (b, c) {
        var d =
          ((c + this.firstMonth - 2 * this.minMonth) % this.monthsInYear(b)) +
          this.minMonth;
        return (
          this._validate(
            b,
            d,
            this.minDay,
            a.calendars.local.invalidMonth ||
              a.calendars.regionalOptions[""].invalidMonth
          ),
          d
        );
      },
      daysInYear: function (b) {
        var c = this._validate(
          b,
          this.minMonth,
          this.minDay,
          a.calendars.local.invalidYear ||
            a.calendars.regionalOptions[""].invalidYear
        );
        return this.leapYear(c) ? 366 : 365;
      },
      dayOfYear: function (b, c, d) {
        var e = this._validate(
          b,
          c,
          d,
          a.calendars.local.invalidDate ||
            a.calendars.regionalOptions[""].invalidDate
        );
        return (
          e.toJD() -
          this.newDate(
            e.year(),
            this.fromMonthOfYear(e.year(), this.minMonth),
            this.minDay
          ).toJD() +
          1
        );
      },
      daysInWeek: function () {
        return 7;
      },
      dayOfWeek: function (b, c, d) {
        var e = this._validate(
          b,
          c,
          d,
          a.calendars.local.invalidDate ||
            a.calendars.regionalOptions[""].invalidDate
        );
        return (Math.floor(this.toJD(e)) + 2) % this.daysInWeek();
      },
      extraInfo: function (b, c, d) {
        return (
          this._validate(
            b,
            c,
            d,
            a.calendars.local.invalidDate ||
              a.calendars.regionalOptions[""].invalidDate
          ),
          {}
        );
      },
      add: function (b, c, d) {
        return (
          this._validate(
            b,
            this.minMonth,
            this.minDay,
            a.calendars.local.invalidDate ||
              a.calendars.regionalOptions[""].invalidDate
          ),
          this._correctAdd(b, this._add(b, c, d), c, d)
        );
      },
      _add: function (a, b, c) {
        this._validateLevel++;
        var d;
        if ("d" === c || "w" === c) {
          var e = a.toJD() + b * ("w" === c ? this.daysInWeek() : 1);
          return (
            (d = a.calendar().fromJD(e)),
            this._validateLevel--,
            [d.year(), d.month(), d.day()]
          );
        }
        try {
          var f = a.year() + ("y" === c ? b : 0),
            g = a.monthOfYear() + ("m" === c ? b : 0);
          d = a.day();
          var h = function (a) {
            for (; g < a.minMonth; ) f--, (g += a.monthsInYear(f));
            for (var b = a.monthsInYear(f); g > b - 1 + a.minMonth; )
              f++, (g -= b), (b = a.monthsInYear(f));
          };
          "y" === c
            ? (a.month() !== this.fromMonthOfYear(f, g) &&
                (g = this.newDate(f, a.month(), this.minDay).monthOfYear()),
              (g = Math.min(g, this.monthsInYear(f))),
              (d = Math.min(
                d,
                this.daysInMonth(f, this.fromMonthOfYear(f, g))
              )))
            : "m" === c &&
              (h(this),
              (d = Math.min(
                d,
                this.daysInMonth(f, this.fromMonthOfYear(f, g))
              )));
          var i = [f, this.fromMonthOfYear(f, g), d];
          return this._validateLevel--, i;
        } catch (a) {
          throw (this._validateLevel--, a);
        }
      },
      _correctAdd: function (a, b, c, d) {
        if (
          !(
            this.hasYearZero ||
            ("y" !== d && "m" !== d) ||
            (0 !== b[0] && a.year() > 0 == b[0] > 0)
          )
        ) {
          var e = {
              y: [1, 1, "y"],
              m: [1, this.monthsInYear(-1), "m"],
              w: [this.daysInWeek(), this.daysInYear(-1), "d"],
              d: [1, this.daysInYear(-1), "d"],
            }[d],
            f = c < 0 ? -1 : 1;
          b = this._add(a, c * e[0] + f * e[1], e[2]);
        }
        return a.date(b[0], b[1], b[2]);
      },
      set: function (b, c, d) {
        this._validate(
          b,
          this.minMonth,
          this.minDay,
          a.calendars.local.invalidDate ||
            a.calendars.regionalOptions[""].invalidDate
        );
        var e = "y" === d ? c : b.year(),
          f = "m" === d ? c : b.month(),
          g = "d" === d ? c : b.day();
        return (
          ("y" !== d && "m" !== d) || (g = Math.min(g, this.daysInMonth(e, f))),
          b.date(e, f, g)
        );
      },
      isValid: function (a, b, c) {
        this._validateLevel++;
        var d = this.hasYearZero || 0 !== a;
        if (d) {
          var e = this.newDate(a, b, this.minDay);
          d =
            b >= this.minMonth &&
            b - this.minMonth < this.monthsInYear(e) &&
            c >= this.minDay &&
            c - this.minDay < this.daysInMonth(e);
        }
        return this._validateLevel--, d;
      },
      toJSDate: function (b, c, d) {
        var e = this._validate(
          b,
          c,
          d,
          a.calendars.local.invalidDate ||
            a.calendars.regionalOptions[""].invalidDate
        );
        return a.calendars.instance().fromJD(this.toJD(e)).toJSDate();
      },
      fromJSDate: function (b) {
        return this.fromJD(a.calendars.instance().fromJSDate(b).toJD());
      },
      _validate: function (b, c, d, e) {
        if (b.year) {
          if (0 === this._validateLevel && this.name !== b.calendar().name)
            throw (
              a.calendars.local.differentCalendars ||
              a.calendars.regionalOptions[""].differentCalendars
            )
              .replace(/\{0\}/, this.local.name)
              .replace(/\{1\}/, b.calendar().local.name);
          return b;
        }
        try {
          if (
            (this._validateLevel++,
            1 === this._validateLevel && !this.isValid(b, c, d))
          )
            throw e.replace(/\{0\}/, this.local.name);
          var f = this.newDate(b, c, d);
          return this._validateLevel--, f;
        } catch (a) {
          throw (this._validateLevel--, a);
        }
      },
    }),
    (f.prototype = new e()),
    a.extend(f.prototype, {
      name: "Gregorian",
      jdEpoch: 1721425.5,
      daysPerMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
      hasYearZero: !1,
      minMonth: 1,
      firstMonth: 1,
      minDay: 1,
      regionalOptions: {
        "": {
          name: "Gregorian",
          epochs: ["BCE", "CE"],
          monthNames: [
            "January",
            "February",
            "March",
            "April",
            "May",
            "June",
            "July",
            "August",
            "September",
            "October",
            "November",
            "December",
          ],
          monthNamesShort: [
            "Jan",
            "Feb",
            "Mar",
            "Apr",
            "May",
            "Jun",
            "Jul",
            "Aug",
            "Sep",
            "Oct",
            "Nov",
            "Dec",
          ],
          dayNames: [
            "Sunday",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
          ],
          dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
          dayNamesMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
          digits: null,
          dateFormat: "mm/dd/yyyy",
          firstDay: 0,
          isRTL: !1,
        },
      },
      leapYear: function (b) {
        var c = this._validate(
          b,
          this.minMonth,
          this.minDay,
          a.calendars.local.invalidYear ||
            a.calendars.regionalOptions[""].invalidYear
        );
        return (
          (b = c.year() + (c.year() < 0 ? 1 : 0)),
          b % 4 === 0 && (b % 100 !== 0 || b % 400 === 0)
        );
      },
      weekOfYear: function (a, b, c) {
        var d = this.newDate(a, b, c);
        return (
          d.add(4 - (d.dayOfWeek() || 7), "d"),
          Math.floor((d.dayOfYear() - 1) / 7) + 1
        );
      },
      daysInMonth: function (b, c) {
        var d = this._validate(
          b,
          c,
          this.minDay,
          a.calendars.local.invalidMonth ||
            a.calendars.regionalOptions[""].invalidMonth
        );
        return (
          this.daysPerMonth[d.month() - 1] +
          (2 === d.month() && this.leapYear(d.year()) ? 1 : 0)
        );
      },
      weekDay: function (a, b, c) {
        return (this.dayOfWeek(a, b, c) || 7) < 6;
      },
      toJD: function (b, c, d) {
        var e = this._validate(
          b,
          c,
          d,
          a.calendars.local.invalidDate ||
            a.calendars.regionalOptions[""].invalidDate
        );
        (b = e.year()),
          (c = e.month()),
          (d = e.day()),
          b < 0 && b++,
          c < 3 && ((c += 12), b--);
        var f = Math.floor(b / 100),
          g = 2 - f + Math.floor(f / 4);
        return (
          Math.floor(365.25 * (b + 4716)) +
          Math.floor(30.6001 * (c + 1)) +
          d +
          g -
          1524.5
        );
      },
      fromJD: function (a) {
        var b = Math.floor(a + 0.5),
          c = Math.floor((b - 1867216.25) / 36524.25);
        c = b + 1 + c - Math.floor(c / 4);
        var d = c + 1524,
          e = Math.floor((d - 122.1) / 365.25),
          f = Math.floor(365.25 * e),
          g = Math.floor((d - f) / 30.6001),
          h = d - f - Math.floor(30.6001 * g),
          i = g - (g > 13.5 ? 13 : 1),
          j = e - (i > 2.5 ? 4716 : 4715);
        return j <= 0 && j--, this.newDate(j, i, h);
      },
      toJSDate: function (b, c, d) {
        var e = this._validate(
            b,
            c,
            d,
            a.calendars.local.invalidDate ||
              a.calendars.regionalOptions[""].invalidDate
          ),
          f = new Date(e.year(), e.month() - 1, e.day());
        return (
          f.setHours(0),
          f.setMinutes(0),
          f.setSeconds(0),
          f.setMilliseconds(0),
          f.setHours(f.getHours() > 12 ? f.getHours() + 2 : 0),
          f
        );
      },
      fromJSDate: function (a) {
        return this.newDate(a.getFullYear(), a.getMonth() + 1, a.getDate());
      },
    }),
    (a.calendars = new b()),
    (a.calendars.cdate = c),
    (a.calendars.baseCalendar = e),
    (a.calendars.calendars.gregorian = f);
})(jQuery);

// ----------------------- 3.jquery.calendars-ar.js  -----------------------  //
(function ($) {
  "use strict";
  $.calendars.calendars.gregorian.prototype.regionalOptions["ar-EG"] = {
    name: "Gregorian",
    epochs: ["BCE", "CE"],
    monthNames: [
      "يناير",
      "فبراير",
      "مارس",
      "إبريل",
      "مايو",
      "يونية",
      "يوليو",
      "أغسطس",
      "سبتمبر",
      "أكتوبر",
      "نوفمبر",
      "ديسمبر",
    ],
    monthNamesShort: [
      "1",
      "2",
      "3",
      "4",
      "5",
      "6",
      "7",
      "8",
      "9",
      "10",
      "11",
      "12",
    ],
    dayNames: [
      "الأحد",
      "الاثنين",
      "الثلاثاء",
      "الأربعاء",
      "الخميس",
      "الجمعة",
      "السبت",
    ],
    dayNamesShort: ["أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"],
    dayNamesMin: ["أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"],
    digits: null,
    dateFormat: "dd/mm/yyyy",
    firstDay: 6,
    isRTL: true,
  };
  if ($.calendars.calendars.julian) {
    $.calendars.calendars.julian.prototype.regionalOptions["ar-EG"] =
      $.calendars.calendars.gregorian.prototype.regionalOptions["ar-EG"];
  }
})(jQuery);

// ----------------------- 4.jquery.calendars.plus.min.js  -----------------------  //
!(function (a) {
  "use strict";
  a.extend(a.calendars.regionalOptions[""], {
    invalidArguments: "Invalid arguments",
    invalidFormat: "Cannot format a date from another calendar",
    missingNumberAt: "Missing number at position {0}",
    unknownNameAt: "Unknown name at position {0}",
    unexpectedLiteralAt: "Unexpected literal at position {0}",
    unexpectedText: "Additional text found at end",
  }),
    (a.calendars.local = a.calendars.regionalOptions[""]),
    a.extend(a.calendars.cdate.prototype, {
      formatDate: function (a, b) {
        return (
          "string" != typeof a && ((b = a), (a = "")),
          this._calendar.formatDate(a || "", this, b)
        );
      },
    }),
    a.extend(a.calendars.baseCalendar.prototype, {
      UNIX_EPOCH: a.calendars.instance().newDate(1970, 1, 1).toJD(),
      SECS_PER_DAY: 86400,
      TICKS_EPOCH: a.calendars.instance().jdEpoch,
      TICKS_PER_DAY: 864e9,
      ATOM: "yyyy-mm-dd",
      COOKIE: "D, dd M yyyy",
      FULL: "DD, MM d, yyyy",
      ISO_8601: "yyyy-mm-dd",
      JULIAN: "J",
      RFC_822: "D, d M yy",
      RFC_850: "DD, dd-M-yy",
      RFC_1036: "D, d M yy",
      RFC_1123: "D, d M yyyy",
      RFC_2822: "D, d M yyyy",
      RSS: "D, d M yy",
      TICKS: "!",
      TIMESTAMP: "@",
      W3C: "yyyy-mm-dd",
      formatDate: function (b, c, d) {
        if (("string" != typeof b && ((d = c), (c = b), (b = "")), !c))
          return "";
        if (c.calendar() !== this)
          throw (
            a.calendars.local.invalidFormat ||
            a.calendars.regionalOptions[""].invalidFormat
          );
        (b = b || this.local.dateFormat), (d = d || {});
        for (
          var e = d.dayNamesShort || this.local.dayNamesShort,
            f = d.dayNames || this.local.dayNames,
            g = d.monthNamesShort || this.local.monthNamesShort,
            h = d.monthNames || this.local.monthNames,
            i = d.localNumbers || this.local.localNumbers,
            j = function (a, c) {
              for (var d = 1; p + d < b.length && b.charAt(p + d) === a; ) d++;
              return (p += d - 1), Math.floor(d / (c || 1)) > 1;
            },
            k = function (a, b, c, d) {
              var e = "" + b;
              if (j(a, d)) for (; e.length < c; ) e = "0" + e;
              return e;
            },
            l = function (a, b, c, d) {
              return j(a) ? d[b] : c[b];
            },
            m =
              i && this.local.digits
                ? this.local.digits
                : function (a) {
                    return a;
                  },
            n = "",
            o = !1,
            p = 0;
          p < b.length;
          p++
        )
          if (o) "'" !== b.charAt(p) || j("'") ? (n += b.charAt(p)) : (o = !1);
          else
            switch (b.charAt(p)) {
              case "d":
                n += m(k("d", c.day(), 2));
                break;
              case "D":
                n += l("D", c.dayOfWeek(), e, f);
                break;
              case "o":
                n += k("o", c.dayOfYear(), 3);
                break;
              case "w":
                n += k("w", c.weekOfYear(), 2);
                break;
              case "m":
                n += m(k("m", c.month(), 2));
                break;
              case "M":
                n += l("M", c.month() - this.minMonth, g, h);
                break;
              case "y":
                n += m(
                  j("y", 2)
                    ? c.year()
                    : (c.year() % 100 < 10 ? "0" : "") + (c.year() % 100)
                );
                break;
              case "Y":
                j("Y", 2), (n += c.formatYear());
                break;
              case "J":
                n += c.toJD();
                break;
              case "@":
                n += (c.toJD() - this.UNIX_EPOCH) * this.SECS_PER_DAY;
                break;
              case "!":
                n += (c.toJD() - this.TICKS_EPOCH) * this.TICKS_PER_DAY;
                break;
              case "'":
                j("'") ? (n += "'") : (o = !0);
                break;
              default:
                n += b.charAt(p);
            }
        return n;
      },
      parseDate: function (b, c, d) {
        if ("undefined" == typeof c || null === c)
          throw (
            a.calendars.local.invalidArguments ||
            a.calendars.regionalOptions[""].invalidArguments
          );
        if (((c = "object" == typeof c ? c.toString() : c + ""), "" === c))
          return null;
        (b = b || this.local.dateFormat), (d = d || {});
        var e = d.shortYearCutoff || this.shortYearCutoff;
        e =
          "string" != typeof e
            ? e
            : (this.today().year() % 100) + parseInt(e, 10);
        for (
          var f = d.dayNamesShort || this.local.dayNamesShort,
            g = d.dayNames || this.local.dayNames,
            h = d.monthNamesShort || this.local.monthNamesShort,
            i = d.monthNames || this.local.monthNames,
            j = -1,
            k = -1,
            l = -1,
            m = -1,
            n = -1,
            o = !1,
            p = !1,
            q = function (a, c) {
              for (var d = 1; w + d < b.length && b.charAt(w + d) === a; ) d++;
              return (w += d - 1), Math.floor(d / (c || 1)) > 1;
            },
            r = function (b, d) {
              var e = q(b, d),
                f = [2, 3, e ? 4 : 2, e ? 4 : 2, 10, 11, 20][
                  "oyYJ@!".indexOf(b) + 1
                ],
                g = new RegExp("^-?\\d{1," + f + "}"),
                h = c.substring(v).match(g);
              if (!h)
                throw (
                  a.calendars.local.missingNumberAt ||
                  a.calendars.regionalOptions[""].missingNumberAt
                ).replace(/\{0\}/, v);
              return (v += h[0].length), parseInt(h[0], 10);
            },
            s = this,
            t = function (b, d, e, f) {
              for (var g = q(b, f) ? e : d, h = 0; h < g.length; h++)
                if (
                  c.substr(v, g[h].length).toLowerCase() === g[h].toLowerCase()
                )
                  return (v += g[h].length), h + s.minMonth;
              throw (
                a.calendars.local.unknownNameAt ||
                a.calendars.regionalOptions[""].unknownNameAt
              ).replace(/\{0\}/, v);
            },
            u = function () {
              if (c.charAt(v) !== b.charAt(w))
                throw (
                  a.calendars.local.unexpectedLiteralAt ||
                  a.calendars.regionalOptions[""].unexpectedLiteralAt
                ).replace(/\{0\}/, v);
              v++;
            },
            v = 0,
            w = 0;
          w < b.length;
          w++
        )
          if (p) "'" !== b.charAt(w) || q("'") ? u() : (p = !1);
          else
            switch (b.charAt(w)) {
              case "d":
                m = r("d");
                break;
              case "D":
                t("D", f, g);
                break;
              case "o":
                n = r("o");
                break;
              case "w":
                r("w");
                break;
              case "m":
                l = r("m");
                break;
              case "M":
                l = t("M", h, i);
                break;
              case "y":
                var x = w;
                (o = !q("y", 2)), (w = x), (k = r("y", 2));
                break;
              case "Y":
                k = r("Y", 2);
                break;
              case "J":
                (j = r("J") + 0.5), "." === c.charAt(v) && (v++, r("J"));
                break;
              case "@":
                j = r("@") / this.SECS_PER_DAY + this.UNIX_EPOCH;
                break;
              case "!":
                j = r("!") / this.TICKS_PER_DAY + this.TICKS_EPOCH;
                break;
              case "*":
                v = c.length;
                break;
              case "'":
                q("'") ? u() : (p = !0);
                break;
              default:
                u();
            }
        if (v < c.length)
          throw (
            a.calendars.local.unexpectedText ||
            a.calendars.regionalOptions[""].unexpectedText
          );
        if (
          (k === -1
            ? (k = this.today().year())
            : k < 100 &&
              o &&
              (k +=
                e === -1
                  ? 1900
                  : this.today().year() -
                    (this.today().year() % 100) -
                    (k <= e ? 0 : 100)),
          n > -1)
        ) {
          (l = 1), (m = n);
          for (
            var y = this.daysInMonth(k, l);
            m > y;
            y = this.daysInMonth(k, l)
          )
            l++, (m -= y);
        }
        return j > -1 ? this.fromJD(j) : this.newDate(k, l, m);
      },
      determineDate: function (a, b, c, d, e) {
        c && "object" != typeof c && ((e = d), (d = c), (c = null)),
          "string" != typeof d && ((e = d), (d = ""));
        var f = this,
          g = function (a) {
            try {
              return f.parseDate(d, a, e);
            } catch (a) {}
            a = a.toLowerCase();
            for (
              var b = (a.match(/^c/) && c ? c.newDate() : null) || f.today(),
                g = /([+-]?[0-9]+)\s*(d|w|m|y)?/g,
                h = g.exec(a);
              h;

            )
              b.add(parseInt(h[1], 10), h[2] || "d"), (h = g.exec(a));
            return b;
          };
        return (
          (b = b ? b.newDate() : null),
          (a =
            "undefined" == typeof a || null === a
              ? b
              : "string" == typeof a
              ? g(a)
              : "number" == typeof a
              ? isNaN(a) || a === 1 / 0 || a === -(1 / 0)
                ? b
                : f.today().add(a, "d")
              : f.newDate(a))
        );
      },
    });
})(jQuery);

// ----------------------- 5.jquery.calendars.picker.min.js  -----------------------  //
!(function (a) {
  "use strict";
  var b = "calendarsPicker";
  a.JQPlugin.createPlugin({
    name: b,
    defaultRenderer: {
      picker:
        '<div class="calendars"><div class="calendars-nav">{link:prev}{link:today}{link:next}</div>{months}{popup:start}<div class="calendars-ctrl">{link:clear}{link:close}</div>{popup:end}<div class="calendars-clear-fix"></div></div>',
      monthRow: '<div class="calendars-month-row">{months}</div>',
      month:
        '<div class="calendars-month"><div class="calendars-month-header">{monthHeader}</div><table><thead>{weekHeader}</thead><tbody>{weeks}</tbody></table></div>',
      weekHeader: "<tr>{days}</tr>",
      dayHeader: "<th>{day}</th>",
      week: "<tr>{days}</tr>",
      day: "<td>{day}</td>",
      monthSelector: ".calendars-month",
      daySelector: "td",
      rtlClass: "calendars-rtl",
      multiClass: "calendars-multi",
      defaultClass: "",
      selectedClass: "calendars-selected",
      highlightedClass: "calendars-highlight",
      todayClass: "calendars-today",
      otherMonthClass: "calendars-other-month",
      weekendClass: "calendars-weekend",
      commandClass: "calendars-cmd",
      commandButtonClass: "",
      commandLinkClass: "",
      disabledClass: "calendars-disabled",
    },
    commands: {
      prev: {
        text: "prevText",
        status: "prevStatus",
        keystroke: { keyCode: 33 },
        enabled: function (a) {
          var b = a.curMinDate();
          return (
            !b ||
            a.drawDate
              .newDate()
              .add(1 - a.options.monthsToStep - a.options.monthsOffset, "m")
              .day(a.options.calendar.minDay)
              .add(-1, "d")
              .compareTo(b) !== -1
          );
        },
        date: function (a) {
          return a.drawDate
            .newDate()
            .add(-a.options.monthsToStep - a.options.monthsOffset, "m")
            .day(a.options.calendar.minDay);
        },
        action: function (a) {
          c.changeMonth(this, -a.options.monthsToStep);
        },
      },
      prevJump: {
        text: "prevJumpText",
        status: "prevJumpStatus",
        keystroke: { keyCode: 33, ctrlKey: !0 },
        enabled: function (a) {
          var b = a.curMinDate();
          return (
            !b ||
            a.drawDate
              .newDate()
              .add(1 - a.options.monthsToJump - a.options.monthsOffset, "m")
              .day(a.options.calendar.minDay)
              .add(-1, "d")
              .compareTo(b) !== -1
          );
        },
        date: function (a) {
          return a.drawDate
            .newDate()
            .add(-a.options.monthsToJump - a.options.monthsOffset, "m")
            .day(a.options.calendar.minDay);
        },
        action: function (a) {
          c.changeMonth(this, -a.options.monthsToJump);
        },
      },
      next: {
        text: "nextText",
        status: "nextStatus",
        keystroke: { keyCode: 34 },
        enabled: function (a) {
          var b = a.get("maxDate");
          return (
            !b ||
            1 !==
              a.drawDate
                .newDate()
                .add(a.options.monthsToStep - a.options.monthsOffset, "m")
                .day(a.options.calendar.minDay)
                .compareTo(b)
          );
        },
        date: function (a) {
          return a.drawDate
            .newDate()
            .add(a.options.monthsToStep - a.options.monthsOffset, "m")
            .day(a.options.calendar.minDay);
        },
        action: function (a) {
          c.changeMonth(this, a.options.monthsToStep);
        },
      },
      nextJump: {
        text: "nextJumpText",
        status: "nextJumpStatus",
        keystroke: { keyCode: 34, ctrlKey: !0 },
        enabled: function (a) {
          var b = a.get("maxDate");
          return (
            !b ||
            1 !==
              a.drawDate
                .newDate()
                .add(a.options.monthsToJump - a.options.monthsOffset, "m")
                .day(a.options.calendar.minDay)
                .compareTo(b)
          );
        },
        date: function (a) {
          return a.drawDate
            .newDate()
            .add(a.options.monthsToJump - a.options.monthsOffset, "m")
            .day(a.options.calendar.minDay);
        },
        action: function (a) {
          c.changeMonth(this, a.options.monthsToJump);
        },
      },
      current: {
        text: "currentText",
        status: "currentStatus",
        keystroke: { keyCode: 36, ctrlKey: !0 },
        enabled: function (a) {
          var b = a.curMinDate(),
            c = a.get("maxDate"),
            d = a.selectedDates[0] || a.options.calendar.today();
          return !((b && d.compareTo(b) === -1) || (c && 1 === d.compareTo(c)));
        },
        date: function (a) {
          return a.selectedDates[0] || a.options.calendar.today();
        },
        action: function (a) {
          var b = a.selectedDates[0] || a.options.calendar.today();
          c.showMonth(this, b.year(), b.month());
        },
      },
      today: {
        text: "todayText",
        status: "todayStatus",
        keystroke: { keyCode: 36, ctrlKey: !0 },
        enabled: function (a) {
          var b = a.curMinDate(),
            c = a.get("maxDate");
          return !(
            (b && a.options.calendar.today().compareTo(b) === -1) ||
            (c && 1 === a.options.calendar.today().compareTo(c))
          );
        },
        date: function (a) {
          return a.options.calendar.today();
        },
        action: function () {
          c.showMonth(this);
        },
      },
      clear: {
        text: "clearText",
        status: "clearStatus",
        keystroke: { keyCode: 35, ctrlKey: !0 },
        enabled: function () {
          return !0;
        },
        date: function () {
          return null;
        },
        action: function () {
          c.clear(this);
        },
      },
      close: {
        text: "closeText",
        status: "closeStatus",
        keystroke: { keyCode: 27 },
        enabled: function () {
          return !0;
        },
        date: function () {
          return null;
        },
        action: function () {
          c.hide(this);
        },
      },
      prevWeek: {
        text: "prevWeekText",
        status: "prevWeekStatus",
        keystroke: { keyCode: 38, ctrlKey: !0 },
        enabled: function (a) {
          var b = a.curMinDate();
          return (
            !b ||
            a.drawDate
              .newDate()
              .add(-a.options.calendar.daysInWeek(), "d")
              .compareTo(b) !== -1
          );
        },
        date: function (a) {
          return a.drawDate
            .newDate()
            .add(-a.options.calendar.daysInWeek(), "d");
        },
        action: function (a) {
          c.changeDay(this, -a.options.calendar.daysInWeek());
        },
      },
      prevDay: {
        text: "prevDayText",
        status: "prevDayStatus",
        keystroke: { keyCode: 37, ctrlKey: !0 },
        enabled: function (a) {
          var b = a.curMinDate();
          return !b || a.drawDate.newDate().add(-1, "d").compareTo(b) !== -1;
        },
        date: function (a) {
          return a.drawDate.newDate().add(-1, "d");
        },
        action: function () {
          c.changeDay(this, -1);
        },
      },
      nextDay: {
        text: "nextDayText",
        status: "nextDayStatus",
        keystroke: { keyCode: 39, ctrlKey: !0 },
        enabled: function (a) {
          var b = a.get("maxDate");
          return !b || 1 !== a.drawDate.newDate().add(1, "d").compareTo(b);
        },
        date: function (a) {
          return a.drawDate.newDate().add(1, "d");
        },
        action: function () {
          c.changeDay(this, 1);
        },
      },
      nextWeek: {
        text: "nextWeekText",
        status: "nextWeekStatus",
        keystroke: { keyCode: 40, ctrlKey: !0 },
        enabled: function (a) {
          var b = a.get("maxDate");
          return (
            !b ||
            1 !==
              a.drawDate
                .newDate()
                .add(a.options.calendar.daysInWeek(), "d")
                .compareTo(b)
          );
        },
        date: function (a) {
          return a.drawDate.newDate().add(a.options.calendar.daysInWeek(), "d");
        },
        action: function (a) {
          c.changeDay(this, a.options.calendar.daysInWeek());
        },
      },
    },
    defaultOptions: {
      calendar: a.calendars.instance(),
      pickerClass: "",
      showOnFocus: !0,
      showTrigger: null,
      showAnim: "show",
      showOptions: {},
      showSpeed: "normal",
      popupContainer: null,
      alignment: "bottom",
      fixedWeeks: !1,
      firstDay: null,
      calculateWeek: null,
      localNumbers: !1,
      monthsToShow: 1,
      monthsOffset: 0,
      monthsToStep: 1,
      monthsToJump: 12,
      useMouseWheel: !0,
      changeMonth: !0,
      yearRange: "c-10:c+10",
      showOtherMonths: !1,
      selectOtherMonths: !1,
      defaultDate: null,
      selectDefaultDate: !1,
      minDate: null,
      maxDate: null,
      dateFormat: null,
      autoSize: !1,
      rangeSelect: !1,
      rangeSeparator: " - ",
      multiSelect: 0,
      multiSeparator: ",",
      onDate: null,
      onShow: null,
      onChangeMonthYear: null,
      onSelect: null,
      onClose: null,
      altField: null,
      altFormat: null,
      constrainInput: !0,
      commandsAsDateFormat: !1,
      commands: {},
    },
    regionalOptions: {
      "": {
        renderer: {},
        prevText: "&lt;Prev",
        prevStatus: "Show the previous month",
        prevJumpText: "&lt;&lt;",
        prevJumpStatus: "Show the previous year",
        nextText: "Next&gt;",
        nextStatus: "Show the next month",
        nextJumpText: "&gt;&gt;",
        nextJumpStatus: "Show the next year",
        currentText: "Current",
        currentStatus: "Show the current month",
        todayText: "Today",
        todayStatus: "Show today's month",
        clearText: "Clear",
        clearStatus: "Clear all the dates",
        closeText: "Close",
        closeStatus: "Close the datepicker",
        yearStatus: "Change the year",
        earlierText: "&#160;&#160;▲",
        laterText: "&#160;&#160;▼",
        monthStatus: "Change the month",
        weekText: "Wk",
        weekStatus: "Week of the year",
        dayStatus: "Select DD, M d, yyyy",
        defaultStatus: "Select a date",
        isRTL: !1,
      },
    },
    _disabled: [],
    _popupClass: "calendars-popup",
    _triggerClass: "calendars-trigger",
    _disableClass: "calendars-disable",
    _monthYearClass: "calendars-month-year",
    _curMonthClass: "calendars-month-",
    _anyYearClass: "calendars-any-year",
    _curDoWClass: "calendars-dow-",
    _init: function () {
      (this.defaultOptions.commands = this.commands),
        (this.regionalOptions[""].renderer = this.defaultRenderer),
        this._super();
    },
    _instSettings: function (b, c) {
      return {
        selectedDates: [],
        drawDate: null,
        pickingRange: !1,
        inline: a.inArray(b[0].nodeName.toLowerCase(), ["div", "span"]) > -1,
        get: function (b) {
          return a.inArray(b, ["defaultDate", "minDate", "maxDate"]) > -1
            ? this.options.calendar.determineDate(
                this.options[b],
                null,
                this.selectedDates[0],
                this.get("dateFormat"),
                this.getConfig()
              )
            : "dateFormat" === b
            ? this.options.dateFormat || this.options.calendar.local.dateFormat
            : this.options[b];
        },
        curMinDate: function () {
          return this.pickingRange
            ? this.selectedDates[0]
            : this.get("minDate");
        },
        getConfig: function () {
          return {
            dayNamesShort: this.options.dayNamesShort,
            dayNames: this.options.dayNames,
            monthNamesShort: this.options.monthNamesShort,
            monthNames: this.options.monthNames,
            calculateWeek: this.options.calculateWeek,
            shortYearCutoff: this.options.shortYearCutoff,
          };
        },
      };
    },
    _postAttach: function (b, d) {
      d.inline
        ? ((d.drawDate = c._checkMinMax(
            (
              d.selectedDates[0] ||
              d.get("defaultDate") ||
              d.options.calendar.today()
            ).newDate(),
            d
          )),
          (d.prevDate = d.drawDate.newDate()),
          this._update(b[0]),
          a.fn.mousewheel && b.mousewheel(this._doMouseWheel))
        : (this._attachments(b, d),
          b
            .on("keydown." + d.name, this._keyDown)
            .on("keypress." + d.name, this._keyPress)
            .on("keyup." + d.name, this._keyUp),
          b.attr("disabled") && this.disable(b[0]));
    },
    _optionsChanged: function (b, c, d) {
      if (d.calendar && d.calendar !== c.options.calendar) {
        var e = function (a) {
          return "object" == typeof c.options[a] ? null : c.options[a];
        };
        (d = a.extend(
          {
            defaultDate: e("defaultDate"),
            minDate: e("minDate"),
            maxDate: e("maxDate"),
          },
          d
        )),
          (c.selectedDates = []),
          (c.drawDate = null);
      }
      var f = c.selectedDates;
      a.extend(c.options, d),
        this.setDate(b[0], f, null, !1, !0),
        (c.pickingRange = !1);
      var g = c.options.calendar,
        h = c.get("defaultDate");
      (c.drawDate = this._checkMinMax(
        (h ? h : c.drawDate) || h || g.today(),
        c
      ).newDate()),
        c.inline || this._attachments(b, c),
        (c.inline || c.div) && this._update(b[0]);
    },
    _attachments: function (b, d) {
      b.off("focus." + d.name),
        d.options.showOnFocus && b.on("focus." + d.name, this.show),
        d.trigger && d.trigger.remove();
      var e = d.options.showTrigger;
      (d.trigger = e
        ? a(e)
            .clone()
            .removeAttr("id")
            .addClass(this._triggerClass)
            [d.options.isRTL ? "insertBefore" : "insertAfter"](b)
            .click(function () {
              c.isDisabled(b[0]) || c[c.curInst === d ? "hide" : "show"](b[0]);
            })
        : a([])),
        this._autoSize(b, d);
      var f = this._extractDates(d, b.val());
      f && this.setDate(b[0], f, null, !0);
      var g = d.get("defaultDate");
      d.options.selectDefaultDate &&
        g &&
        0 === d.selectedDates.length &&
        this.setDate(b[0], (g || d.options.calendar.today()).newDate());
    },
    _autoSize: function (a, b) {
      if (b.options.autoSize && !b.inline) {
        var c = b.options.calendar,
          d = c.newDate(2009, 10, 20),
          e = b.get("dateFormat");
        if (e.match(/[DM]/)) {
          var f = function (a) {
            for (var b = 0, c = 0, d = 0; d < a.length; d++)
              a[d].length > b && ((b = a[d].length), (c = d));
            return c;
          };
          d.month(
            f(c.local[e.match(/MM/) ? "monthNames" : "monthNamesShort"]) + 1
          ),
            d.day(
              f(c.local[e.match(/DD/) ? "dayNames" : "dayNamesShort"]) +
                20 -
                d.dayOfWeek()
            );
        }
        b.elem.attr(
          "size",
          d.formatDate(e, { localNumbers: b.options.localnumbers }).length
        );
      }
    },
    _preDestroy: function (b, c) {
      c.trigger && c.trigger.remove(),
        b.empty().off("." + c.name),
        c.inline && a.fn.mousewheel && b.unmousewheel(),
        !c.inline && c.options.autoSize && b.removeAttr("size");
    },
    multipleEvents: function (a) {
      var b = arguments;
      return function () {
        for (var a = 0; a < b.length; a++) b[a].apply(this, arguments);
      };
    },
    enable: function (b) {
      if (((b = a(b)), b.hasClass(this._getMarker()))) {
        var c = this._getInst(b);
        c.inline
          ? b
              .children("." + this._disableClass)
              .remove()
              .end()
              .find("button,select")
              .prop("disabled", !1)
              .end()
              .find("a")
              .attr("href", "#")
          : (b.prop("disabled", !1),
            c.trigger
              .filter("button." + this._triggerClass)
              .prop("disabled", !1)
              .end()
              .filter("img." + this._triggerClass)
              .css({ opacity: "1.0", cursor: "" })),
          (this._disabled = a.map(this._disabled, function (a) {
            return a === b[0] ? null : a;
          }));
      }
    },
    disable: function (b) {
      if (((b = a(b)), b.hasClass(this._getMarker()))) {
        var c = this._getInst(b);
        if (c.inline) {
          var d = b.children(":last"),
            e = d.offset(),
            f = { left: 0, top: 0 };
          d.parents().each(function () {
            if ("relative" === a(this).css("position"))
              return (f = a(this).offset()), !1;
          });
          var g = b.css("zIndex");
          (g = ("auto" === g ? 0 : parseInt(g, 10)) + 1),
            b
              .prepend(
                '<div class="' +
                  this._disableClass +
                  '" style="width: ' +
                  d.outerWidth() +
                  "px; height: " +
                  d.outerHeight() +
                  "px; left: " +
                  (e.left - f.left) +
                  "px; top: " +
                  (e.top - f.top) +
                  "px; z-index: " +
                  g +
                  '"></div>'
              )
              .find("button,select")
              .prop("disabled", !0)
              .end()
              .find("a")
              .removeAttr("href");
        } else
          b.prop("disabled", !0),
            c.trigger
              .filter("button." + this._triggerClass)
              .prop("disabled", !0)
              .end()
              .filter("img." + this._triggerClass)
              .css({ opacity: "0.5", cursor: "default" });
        (this._disabled = a.map(this._disabled, function (a) {
          return a === b[0] ? null : a;
        })),
          this._disabled.push(b[0]);
      }
    },
    isDisabled: function (b) {
      return b && a.inArray(b, this._disabled) > -1;
    },
    show: function (b) {
      b = a(b.target || b);
      var d = c._getInst(b);
      if (
        c.curInst !== d &&
        (c.curInst && c.hide(c.curInst, !0), !a.isEmptyObject(d))
      ) {
        (d.lastVal = null),
          (d.selectedDates = c._extractDates(d, b.val())),
          (d.pickingRange = !1),
          (d.drawDate = c._checkMinMax(
            (
              d.selectedDates[0] ||
              d.get("defaultDate") ||
              d.options.calendar.today()
            ).newDate(),
            d
          )),
          (d.prevDate = d.drawDate.newDate()),
          (c.curInst = d),
          c._update(b[0], !0);
        var e = c._checkOffset(d);
        d.div.css({ left: e.left, top: e.top });
        var f = d.options.showAnim,
          g = d.options.showSpeed;
        if (
          ((g =
            "normal" === g && a.ui && parseInt(a.ui.version.substring(2)) >= 8
              ? "_default"
              : g),
          a.effects &&
            (a.effects[f] || (a.effects.effect && a.effects.effect[f])))
        ) {
          var h = d.div.data();
          for (var i in h)
            i.match(/^ec\.storage\./) &&
              (h[i] = d._mainDiv.css(i.replace(/ec\.storage\./, "")));
          d.div.data(h).show(f, d.options.showOptions, g);
        } else d.div[f || "show"](f ? g : 0);
      }
    },
    _extractDates: function (a, b) {
      if (b !== a.lastVal) {
        (a.lastVal = b),
          (b = b.split(
            a.options.multiSelect
              ? a.options.multiSeparator
              : a.options.rangeSelect
              ? a.options.rangeSeparator
              : "\0"
          ));
        for (var c = [], d = 0; d < b.length; d++)
          try {
            var e = a.options.calendar.parseDate(a.get("dateFormat"), b[d]);
            if (e) {
              for (var f = !1, g = 0; g < c.length; g++)
                if (0 === c[g].compareTo(e)) {
                  f = !0;
                  break;
                }
              f || c.push(e);
            }
          } catch (a) {}
        return (
          c.splice(
            a.options.multiSelect || (a.options.rangeSelect ? 2 : 1),
            c.length
          ),
          a.options.rangeSelect && 1 === c.length && (c[1] = c[0]),
          c
        );
      }
    },
    _update: function (b, d) {
      b = a(b.target || b);
      var e = c._getInst(b);
      if (!a.isEmptyObject(e))
        if (
          ((e.inline || c.curInst === e) &&
            (!a.isFunction(e.options.onChangeMonthYear) ||
              (e.prevDate &&
                e.prevDate.year() === e.drawDate.year() &&
                e.prevDate.month() === e.drawDate.month()) ||
              e.options.onChangeMonthYear.apply(b[0], [
                e.drawDate.year(),
                e.drawDate.month(),
              ])),
          e.inline)
        ) {
          var f = a("a, :input", b).index(a(":focus", b));
          b.html(this._generateContent(b[0], e));
          var g = b.find("a, :input");
          g.eq(Math.max(Math.min(f, g.length - 1), 0)).focus();
        } else
          c.curInst === e &&
            (e.div ||
              ((e.div = a("<div></div>")
                .addClass(this._popupClass)
                .css({
                  display: d ? "none" : "static",
                  position: "absolute",
                  left: b.offset().left,
                  top: b.offset().top + b.outerHeight(),
                })
                .appendTo(a(e.options.popupContainer || "body"))),
              a.fn.mousewheel && e.div.mousewheel(this._doMouseWheel)),
            e.div.html(this._generateContent(b[0], e)),
            b.focus());
    },
    _updateInput: function (b, c) {
      var d = this._getInst(b);
      if (!a.isEmptyObject(d)) {
        for (
          var e = "",
            f = "",
            g = d.options.multiSelect
              ? d.options.multiSeparator
              : d.options.rangeSeparator,
            h = d.options.calendar,
            i = d.get("dateFormat"),
            j = d.options.altFormat || i,
            k = { localNumbers: d.options.localNumbers },
            l = 0;
          l < d.selectedDates.length;
          l++
        )
          (e += c
            ? ""
            : (l > 0 ? g : "") + h.formatDate(i, d.selectedDates[l], k)),
            (f += (l > 0 ? g : "") + h.formatDate(j, d.selectedDates[l], k));
        d.inline || c || a(b).val(e),
          a(d.options.altField).val(f),
          !a.isFunction(d.options.onSelect) ||
            c ||
            d.inSelect ||
            ((d.inSelect = !0),
            d.options.onSelect.apply(b, [d.selectedDates]),
            (d.inSelect = !1)),
          a(b).change();
      }
    },
    _getBorders: function (a) {
      var b = function (a) {
        return { thin: 1, medium: 3, thick: 5 }[a] || a;
      };
      return [
        parseFloat(b(a.css("border-left-width"))),
        parseFloat(b(a.css("border-top-width"))),
      ];
    },
    _checkOffset: function (b) {
      var c = b.elem.is(":hidden") && b.trigger ? b.trigger : b.elem,
        d = c.offset(),
        e = a(window).width(),
        f = a(window).height();
      if (0 === e) return d;
      var g = !1;
      a(b.elem)
        .parents()
        .each(function () {
          return (g = g || "fixed" === a(this).css("position")), !g;
        });
      var h = document.documentElement.scrollLeft || document.body.scrollLeft,
        i = document.documentElement.scrollTop || document.body.scrollTop,
        j = d.top - (g ? i : 0) - b.div.outerHeight(),
        k = d.top - (g ? i : 0) + c.outerHeight(),
        l = d.left - (g ? h : 0),
        m = d.left - (g ? h : 0) + c.outerWidth() - b.div.outerWidth(),
        n = d.left - h + b.div.outerWidth() > e,
        o = d.top - i + b.elem.outerHeight() + b.div.outerHeight() > f;
      b.div.css("position", g ? "fixed" : "absolute");
      var p = b.options.alignment;
      return (
        (d =
          "topLeft" === p
            ? { left: l, top: j }
            : "topRight" === p
            ? { left: m, top: j }
            : "bottomLeft" === p
            ? { left: l, top: k }
            : "bottomRight" === p
            ? { left: m, top: k }
            : "top" === p
            ? { left: b.options.isRTL || n ? m : l, top: j }
            : { left: b.options.isRTL || n ? m : l, top: o ? j : k }),
        (d.left = Math.max(g ? 0 : h, d.left)),
        (d.top = Math.max(g ? 0 : i, d.top)),
        d
      );
    },
    _checkExternalClick: function (b) {
      if (c.curInst) {
        var d = a(b.target);
        0 !== d.closest("." + c._popupClass + ",." + c._triggerClass).length ||
          d.hasClass(c._getMarker()) ||
          c.hide(c.curInst);
      }
    },
    hide: function (b, d) {
      if (b) {
        var e = this._getInst(b);
        if ((a.isEmptyObject(e) && (e = b), e && e === c.curInst)) {
          var f = d ? "" : e.options.showAnim,
            g = e.options.showSpeed;
          g =
            "normal" === g && a.ui && parseInt(a.ui.version.substring(2)) >= 8
              ? "_default"
              : g;
          var h = function () {
            e.div &&
              (e.div.remove(),
              (e.div = null),
              (c.curInst = null),
              a.isFunction(e.options.onClose) &&
                e.options.onClose.apply(b, [e.selectedDates]));
          };
          if (
            (e.div.stop(),
            a.effects &&
              (a.effects[f] || (a.effects.effect && a.effects.effect[f])))
          )
            e.div.hide(f, e.options.showOptions, g, h);
          else {
            var i =
              "slideDown" === f
                ? "slideUp"
                : "fadeIn" === f
                ? "fadeOut"
                : "hide";
            e.div[i](f ? g : "", h);
          }
          f || h();
        }
      }
    },
    _keyDown: function (b) {
      var d,
        e = (b.data && b.data.elem) || b.target,
        f = c._getInst(e),
        g = !1;
      if (f.inline || f.div)
        if (9 === b.keyCode) c.hide(e);
        else if (13 === b.keyCode)
          c.selectDate(
            e,
            a("a." + f.options.renderer.highlightedClass, f.div)[0]
          ),
            (g = !0);
        else {
          var h = f.options.commands;
          for (var i in h)
            if (
              f.options.commands.hasOwnProperty(i) &&
              ((d = h[i]),
              d.keystroke.keyCode === b.keyCode &&
                !!d.keystroke.ctrlKey == !(!b.ctrlKey && !b.metaKey) &&
                !!d.keystroke.altKey === b.altKey &&
                !!d.keystroke.shiftKey === b.shiftKey)
            ) {
              c.performAction(e, i), (g = !0);
              break;
            }
        }
      else
        (d = f.options.commands.current),
          d.keystroke.keyCode === b.keyCode &&
            !!d.keystroke.ctrlKey == !(!b.ctrlKey && !b.metaKey) &&
            !!d.keystroke.altKey === b.altKey &&
            !!d.keystroke.shiftKey === b.shiftKey &&
            (c.show(e), (g = !0));
      return (
        (f.ctrlKey =
          (b.keyCode < 48 && 32 !== b.keyCode) || b.ctrlKey || b.metaKey),
        g && (b.preventDefault(), b.stopPropagation()),
        !g
      );
    },
    _keyPress: function (b) {
      var d = c._getInst((b.data && b.data.elem) || b.target);
      if (!a.isEmptyObject(d) && d.options.constrainInput) {
        var e = String.fromCharCode(b.keyCode || b.charCode),
          f = c._allowedChars(d);
        return b.metaKey || d.ctrlKey || e < " " || !f || f.indexOf(e) > -1;
      }
      return !0;
    },
    _allowedChars: function (a) {
      for (
        var b = a.options.multiSelect
            ? a.options.multiSeparator
            : a.options.rangeSelect
            ? a.options.rangeSeparator
            : "",
          c = !1,
          d = !1,
          e = a.get("dateFormat"),
          f = 0;
        f < e.length;
        f++
      ) {
        var g = e.charAt(f);
        if (c) "'" === g && "'" !== e.charAt(f + 1) ? (c = !1) : (b += g);
        else
          switch (g) {
            case "d":
            case "m":
            case "o":
            case "w":
              (b += d ? "" : "0123456789"), (d = !0);
              break;
            case "y":
            case "@":
            case "!":
              (b += (d ? "" : "0123456789") + "-"), (d = !0);
              break;
            case "J":
              (b += (d ? "" : "0123456789") + "-."), (d = !0);
              break;
            case "D":
            case "M":
            case "Y":
              return null;
            case "'":
              "'" === e.charAt(f + 1) ? (b += "'") : (c = !0);
              break;
            default:
              b += g;
          }
      }
      return b;
    },
    _keyUp: function (b) {
      var d = (b.data && b.data.elem) || b.target,
        e = c._getInst(d);
      if (!a.isEmptyObject(e) && !e.ctrlKey && e.lastVal !== e.elem.val())
        try {
          var f = c._extractDates(e, e.elem.val());
          f.length > 0 && c.setDate(d, f, null, !0);
        } catch (a) {}
      return !0;
    },
    _doMouseWheel: function (b, d) {
      var e =
        (c.curInst && c.curInst.elem[0]) ||
        a(b.target).closest("." + c._getMarker())[0];
      if (!c.isDisabled(e)) {
        var f = c._getInst(e);
        f.options.useMouseWheel &&
          ((d = d < 0 ? -1 : 1),
          c.changeMonth(
            e,
            -f.options[b.ctrlKey ? "monthsToJump" : "monthsToStep"] * d
          )),
          b.preventDefault();
      }
    },
    clear: function (b) {
      var c = this._getInst(b);
      if (!a.isEmptyObject(c)) {
        (c.selectedDates = []), this.hide(b);
        var d = c.get("defaultDate");
        c.options.selectDefaultDate && d
          ? this.setDate(b, (d || c.options.calendar.today()).newDate())
          : this._updateInput(b);
      }
    },
    getDate: function (b) {
      var c = this._getInst(b);
      return a.isEmptyObject(c) ? [] : c.selectedDates;
    },
    setDate: function (b, c, d, e, f) {
      var g = this._getInst(b);
      if (!a.isEmptyObject(g)) {
        a.isArray(c) || ((c = [c]), d && c.push(d));
        var h = g.get("minDate"),
          i = g.get("maxDate"),
          j = g.selectedDates[0];
        g.selectedDates = [];
        for (var k = 0; k < c.length; k++) {
          var l = g.options.calendar.determineDate(
            c[k],
            null,
            j,
            g.get("dateFormat"),
            g.getConfig()
          );
          if (
            l &&
            !((h && l.compareTo(h) === -1) || (i && 1 === l.compareTo(i)))
          ) {
            for (var m = !1, n = 0; n < g.selectedDates.length; n++)
              if (0 === g.selectedDates[n].compareTo(l)) {
                m = !0;
                break;
              }
            m || g.selectedDates.push(l);
          }
        }
        if (
          (g.selectedDates.splice(
            g.options.multiSelect || (g.options.rangeSelect ? 2 : 1),
            g.selectedDates.length
          ),
          g.options.rangeSelect)
        ) {
          switch (g.selectedDates.length) {
            case 1:
              g.selectedDates[1] = g.selectedDates[0];
              break;
            case 2:
              g.selectedDates[1] =
                1 === g.selectedDates[0].compareTo(g.selectedDates[1])
                  ? g.selectedDates[0]
                  : g.selectedDates[1];
          }
          g.pickingRange = !1;
        }
        (g.prevDate = g.drawDate ? g.drawDate.newDate() : null),
          (g.drawDate = this._checkMinMax(
            (
              g.selectedDates[0] ||
              g.get("defaultDate") ||
              g.options.calendar.today()
            ).newDate(),
            g
          )),
          f || (this._update(b), this._updateInput(b, e));
      }
    },
    isSelectable: function (b, c) {
      var d = this._getInst(b);
      return (
        !a.isEmptyObject(d) &&
        ((c = d.options.calendar.determineDate(
          c,
          d.selectedDates[0] || d.options.calendar.today(),
          null,
          d.options.dateFormat,
          d.getConfig()
        )),
        this._isSelectable(
          b,
          c,
          d.options.onDate,
          d.get("minDate"),
          d.get("maxDate")
        ))
      );
    },
    _isSelectable: function (b, c, d, e, f) {
      var g =
        "boolean" == typeof d
          ? { selectable: d }
          : a.isFunction(d)
          ? d.apply(b, [c, !0])
          : {};
      return (
        g.selectable !== !1 &&
        (!e || c.toJD() >= e.toJD()) &&
        (!f || c.toJD() <= f.toJD())
      );
    },
    performAction: function (b, c) {
      var d = this._getInst(b);
      if (!a.isEmptyObject(d) && !this.isDisabled(b)) {
        var e = d.options.commands;
        e[c] && e[c].enabled.apply(b, [d]) && e[c].action.apply(b, [d]);
      }
    },
    showMonth: function (b, c, d, e) {
      var f = this._getInst(b);
      if (
        !a.isEmptyObject(f) &&
        (("undefined" != typeof e && null !== e) ||
          f.drawDate.year() !== c ||
          f.drawDate.month() !== d)
      ) {
        f.prevDate = f.drawDate.newDate();
        var g = f.options.calendar,
          h = this._checkMinMax(
            "undefined" != typeof c && null !== c
              ? g.newDate(c, d, 1)
              : g.today(),
            f
          );
        f.drawDate.date(
          h.year(),
          h.month(),
          "undefined" != typeof e && null !== e
            ? e
            : Math.min(f.drawDate.day(), g.daysInMonth(h.year(), h.month()))
        ),
          this._update(b);
      }
    },
    changeMonth: function (b, c) {
      var d = this._getInst(b);
      if (!a.isEmptyObject(d)) {
        var e = d.drawDate.newDate().add(c, "m");
        this.showMonth(b, e.year(), e.month());
      }
    },
    changeDay: function (b, c) {
      var d = this._getInst(b);
      if (!a.isEmptyObject(d)) {
        var e = d.drawDate.newDate().add(c, "d");
        this.showMonth(b, e.year(), e.month(), e.day());
      }
    },
    _checkMinMax: function (a, b) {
      var c = b.get("minDate"),
        d = b.get("maxDate");
      return (
        (a = c && a.compareTo(c) === -1 ? c.newDate() : a),
        (a = d && 1 === a.compareTo(d) ? d.newDate() : a)
      );
    },
    retrieveDate: function (b, c) {
      var d = this._getInst(b);
      return a.isEmptyObject(d)
        ? null
        : d.options.calendar.fromJD(
            parseFloat(c.className.replace(/^.*jd(\d+\.5).*$/, "$1"))
          );
    },
    selectDate: function (b, c) {
      var d = this._getInst(b);
      if (!a.isEmptyObject(d) && !this.isDisabled(b)) {
        var e = this.retrieveDate(b, c);
        if (d.options.multiSelect) {
          for (var f = !1, g = 0; g < d.selectedDates.length; g++)
            if (0 === e.compareTo(d.selectedDates[g])) {
              d.selectedDates.splice(g, 1), (f = !0);
              break;
            }
          !f &&
            d.selectedDates.length < d.options.multiSelect &&
            d.selectedDates.push(e);
        } else
          d.options.rangeSelect
            ? (d.pickingRange
                ? (d.selectedDates[1] = e)
                : (d.selectedDates = [e, e]),
              (d.pickingRange = !d.pickingRange))
            : (d.selectedDates = [e]);
        (d.prevDate = d.drawDate = e.newDate()),
          this._updateInput(b),
          d.inline ||
          d.pickingRange ||
          d.selectedDates.length <
            (d.options.multiSelect || (d.options.rangeSelect ? 2 : 1))
            ? this._update(b)
            : this.hide(b);
      }
    },
    _generateContent: function (b, d) {
      function e(b) {
        (d.inline ? a(b).closest("." + p._getMarker()) : d.div)
          .find(d.options.renderer.daySelector + " a")
          .removeClass(d.options.renderer.highlightedClass);
      }
      var f = d.options.monthsToShow;
      (f = a.isArray(f) ? f : [1, f]),
        (d.drawDate = this._checkMinMax(
          d.drawDate || d.get("defaultDate") || d.options.calendar.today(),
          d
        ));
      for (
        var g = d.drawDate.newDate().add(-d.options.monthsOffset, "m"),
          h = "",
          i = 0;
        i < f[0];
        i++
      ) {
        for (var j = "", k = 0; k < f[1]; k++)
          (j += this._generateMonth(
            b,
            d,
            g.year(),
            g.month(),
            d.options.calendar,
            d.options.renderer,
            0 === i && 0 === k
          )),
            g.add(1, "m");
        h += this._prepare(d.options.renderer.monthRow, d).replace(
          /\{months\}/,
          j
        );
      }
      var l = this._prepare(d.options.renderer.picker, d)
          .replace(/\{months\}/, h)
          .replace(
            /\{weekHeader\}/g,
            this._generateDayHeaders(d, d.options.calendar, d.options.renderer)
          ),
        m = function (a, c, e, f, g) {
          if (l.indexOf("{" + a + ":" + f + "}") !== -1) {
            var h = d.options.commands[f],
              i = d.options.commandsAsDateFormat ? h.date.apply(b, [d]) : null;
            l = l.replace(
              new RegExp("\\{" + a + ":" + f + "\\}", "g"),
              "<" +
                c +
                (h.status ? ' title="' + d.options[h.status] + '"' : "") +
                ' class="' +
                d.options.renderer.commandClass +
                " " +
                d.options.renderer.commandClass +
                "-" +
                f +
                " " +
                g +
                (h.enabled(d) ? "" : " " + d.options.renderer.disabledClass) +
                '">' +
                (i
                  ? i.formatDate(d.options[h.text], {
                      localNumbers: d.options.localNumbers,
                    })
                  : d.options[h.text]) +
                "</" +
                e +
                ">"
            );
          }
        };
      for (var n in d.options.commands)
        d.options.commands.hasOwnProperty(n) &&
          (m(
            "button",
            'button type="button"',
            "button",
            n,
            d.options.renderer.commandButtonClass
          ),
          m(
            "link",
            'a href="javascript:void(0)"',
            "a",
            n,
            d.options.renderer.commandLinkClass
          ));
      if (((l = a(l)), f[1] > 1)) {
        var o = 0;
        a(d.options.renderer.monthSelector, l).each(function () {
          var b = ++o % f[1];
          a(this).addClass(1 === b ? "first" : 0 === b ? "last" : "");
        });
      }
      var p = this;
      l.find(d.options.renderer.daySelector + " a")
        .hover(
          function () {
            e(this), a(this).addClass(d.options.renderer.highlightedClass);
          },
          function () {
            e(this);
          }
        )
        .click(function () {
          p.selectDate(b, this);
        })
        .end()
        .find(
          "select." + this._monthYearClass + ":not(." + this._anyYearClass + ")"
        )
        .change(function () {
          var c = a(this).val().split("/");
          p.showMonth(b, parseInt(c[1], 10), parseInt(c[0], 10));
        })
        .end()
        .find("select." + this._anyYearClass)
        .click(function () {
          a(this)
            .css("visibility", "hidden")
            .next("input")
            .css({
              left: this.offsetLeft,
              top: this.offsetTop,
              width: this.offsetWidth,
              height: this.offsetHeight,
            })
            .show()
            .focus();
        })
        .end()
        .find("input." + p._monthYearClass)
        .change(function () {
          try {
            var c = parseInt(a(this).val(), 10);
            (c = isNaN(c) ? d.drawDate.year() : c),
              p.showMonth(b, c, d.drawDate.month(), d.drawDate.day());
          } catch (a) {}
        })
        .keydown(function (b) {
          13 === b.keyCode
            ? a(b.elem).change()
            : 27 === b.keyCode &&
              (a(b.elem).hide().prev("select").css("visibility", "visible"),
              d.elem.focus());
        });
      var q = { elem: d.elem[0] };
      l
        .keydown(q, this._keyDown)
        .keypress(q, this._keyPress)
        .keyup(q, this._keyUp),
        l.find("." + d.options.renderer.commandClass).click(function () {
          if (!a(this).hasClass(d.options.renderer.disabledClass)) {
            var e = this.className.replace(
              new RegExp(
                "^.*" + d.options.renderer.commandClass + "-([^ ]+).*$"
              ),
              "$1"
            );
            c.performAction(b, e);
          }
        }),
        d.options.isRTL && l.addClass(d.options.renderer.rtlClass),
        f[0] * f[1] > 1 && l.addClass(d.options.renderer.multiClass),
        d.options.pickerClass && l.addClass(d.options.pickerClass),
        a("body").append(l);
      var r = 0;
      return (
        l.find(d.options.renderer.monthSelector).each(function () {
          r += a(this).outerWidth();
        }),
        l.width(r / f[0]),
        a.isFunction(d.options.onShow) &&
          d.options.onShow.apply(b, [l, d.options.calendar, d]),
        l
      );
    },
    _generateMonth: function (b, c, d, e, f, g, h) {
      var i = f.daysInMonth(d, e),
        j = c.options.monthsToShow;
      j = a.isArray(j) ? j : [1, j];
      var k = c.options.fixedWeeks || j[0] * j[1] > 1,
        l = c.options.firstDay;
      l = "undefined" == typeof l || null === l ? f.local.firstDay : l;
      var m =
          (f.dayOfWeek(d, e, f.minDay) - l + f.daysInWeek()) % f.daysInWeek(),
        n = k ? 6 : Math.ceil((m + i) / f.daysInWeek()),
        o = c.options.selectOtherMonths && c.options.showOtherMonths,
        p = c.pickingRange ? c.selectedDates[0] : c.get("minDate"),
        q = c.get("maxDate"),
        r = g.week.indexOf("{weekOfYear}") > -1,
        s = f.today(),
        t = f.newDate(d, e, f.minDay);
      t.add(
        -m -
          (k && (t.dayOfWeek() === l || t.daysInMonth() < f.daysInWeek())
            ? f.daysInWeek()
            : 0),
        "d"
      );
      for (
        var u = t.toJD(),
          v = function (a) {
            return c.options.localNumbers && f.local.digits
              ? f.local.digits(a)
              : a;
          },
          w = "",
          x = 0;
        x < n;
        x++
      ) {
        for (
          var y = r
              ? '<span class="jd' +
                u +
                '">' +
                (a.isFunction(c.options.calculateWeek)
                  ? c.options.calculateWeek(t)
                  : t.weekOfYear()) +
                "</span>"
              : "",
            z = "",
            A = 0;
          A < f.daysInWeek();
          A++
        ) {
          var B = !1;
          if (c.options.rangeSelect && c.selectedDates.length > 0)
            B =
              t.compareTo(c.selectedDates[0]) !== -1 &&
              1 !== t.compareTo(c.selectedDates[1]);
          else
            for (var C = 0; C < c.selectedDates.length; C++)
              if (0 === c.selectedDates[C].compareTo(t)) {
                B = !0;
                break;
              }
          var D = a.isFunction(c.options.onDate)
              ? c.options.onDate.apply(b, [t, t.month() === e])
              : {},
            E =
              (o || t.month() === e) &&
              this._isSelectable(b, t, D.selectable, p, q);
          (z += this._prepare(g.day, c).replace(
            /\{day\}/g,
            (E ? '<a href="javascript:void(0)"' : "<span") +
              ' class="jd' +
              u +
              " " +
              (D.dateClass || "") +
              (B && (o || t.month() === e) ? " " + g.selectedClass : "") +
              (E ? " " + g.defaultClass : "") +
              (t.weekDay() ? "" : " " + g.weekendClass) +
              (t.month() === e ? "" : " " + g.otherMonthClass) +
              (0 === t.compareTo(s) && t.month() === e
                ? " " + g.todayClass
                : "") +
              (0 === t.compareTo(c.drawDate) && t.month() === e
                ? " " + g.highlightedClass
                : "") +
              '"' +
              (D.title || (c.options.dayStatus && E)
                ? ' title="' +
                  (D.title ||
                    t.formatDate(c.options.dayStatus, {
                      localNumbers: c.options.localNumbers,
                    })) +
                  '"'
                : "") +
              ">" +
              (c.options.showOtherMonths || t.month() === e
                ? D.content || v(t.day())
                : "&#160;") +
              (E ? "</a>" : "</span>")
          )),
            t.add(1, "d"),
            u++;
        }
        w += this._prepare(g.week, c)
          .replace(/\{days\}/g, z)
          .replace(/\{weekOfYear\}/g, y);
      }
      var F = this._prepare(g.month, c).match(/\{monthHeader(:[^\}]+)?\}/);
      (F = F[0].length <= 13 ? "MM yyyy" : F[0].substring(13, F[0].length - 1)),
        (F = h
          ? this._generateMonthSelection(c, d, e, p, q, F, f, g)
          : f.formatDate(F, f.newDate(d, e, f.minDay), {
              localNumbers: c.options.localNumbers,
            }));
      var G = this._prepare(g.weekHeader, c).replace(
        /\{days\}/g,
        this._generateDayHeaders(c, f, g)
      );
      return this._prepare(g.month, c)
        .replace(/\{monthHeader(:[^\}]+)?\}/g, F)
        .replace(/\{weekHeader\}/g, G)
        .replace(/\{weeks\}/g, w);
    },
    _generateDayHeaders: function (a, b, c) {
      var d = a.options.firstDay;
      d = "undefined" == typeof d || null === d ? b.local.firstDay : d;
      for (var e = "", f = 0; f < b.daysInWeek(); f++) {
        var g = (f + d) % b.daysInWeek();
        e += this._prepare(c.dayHeader, a).replace(
          /\{day\}/g,
          '<span class="' +
            this._curDoWClass +
            g +
            '" title="' +
            b.local.dayNames[g] +
            '">' +
            b.local.dayNamesMin[g] +
            "</span>"
        );
      }
      return e;
    },
    _generateMonthSelection: function (a, b, c, d, e, f, g) {
      if (!a.options.changeMonth)
        return g.formatDate(f, g.newDate(b, c, 1), {
          localNumbers: a.options.localNumbers,
        });
      for (
        var h = g.local["monthNames" + (f.match(/mm/i) ? "" : "Short")],
          i = f.replace(/m+/i, "\\x2E").replace(/y+/i, "\\x2F"),
          j =
            '<select class="' +
            this._monthYearClass +
            '" title="' +
            a.options.monthStatus +
            '">',
          k = g.monthsInYear(b) + g.minMonth,
          l = g.minMonth;
        l < k;
        l++
      )
        (d &&
          g.newDate(b, l, g.daysInMonth(b, l) - 1 + g.minDay).compareTo(d) ===
            -1) ||
          (e && 1 === g.newDate(b, l, g.minDay).compareTo(e)) ||
          (j +=
            '<option value="' +
            l +
            "/" +
            b +
            '"' +
            (c === l ? ' selected="selected"' : "") +
            ">" +
            h[l - g.minMonth] +
            "</option>");
      (j += "</select>"), (i = i.replace(/\\x2E/, j));
      var m = function (b) {
          return a.options.localNumbers && g.local.digits
            ? g.local.digits(b)
            : b;
        },
        n = a.options.yearRange;
      if ("any" === n)
        j =
          '<select class="' +
          this._monthYearClass +
          " " +
          this._anyYearClass +
          '" title="' +
          a.options.yearStatus +
          '"><option value="' +
          b +
          '">' +
          m(b) +
          '</option></select><input class="' +
          this._monthYearClass +
          " " +
          this._curMonthClass +
          c +
          '" value="' +
          b +
          '">';
      else {
        n = n.split(":");
        var o = g.today().year(),
          p = n[0].match("c[+-].*")
            ? b + parseInt(n[0].substring(1), 10)
            : (n[0].match("[+-].*") ? o : 0) + parseInt(n[0], 10),
          q = n[1].match("c[+-].*")
            ? b + parseInt(n[1].substring(1), 10)
            : (n[1].match("[+-].*") ? o : 0) + parseInt(n[1], 10);
        (j =
          '<select class="' +
          this._monthYearClass +
          '" title="' +
          a.options.yearStatus +
          '">'),
          (p = g.newDate(p + 1, g.firstMonth, g.minDay).add(-1, "d")),
          (q = g.newDate(q, g.firstMonth, g.minDay));
        var r,
          s,
          t = function (a, d) {
            (0 !== a || g.hasYearZero) &&
              (j +=
                '<option value="' +
                Math.min(c, g.monthsInYear(a) - 1 + g.minMonth) +
                "/" +
                a +
                '"' +
                (b === a ? ' selected="selected"' : "") +
                ">" +
                (d || m(a)) +
                "</option>");
          };
        if (p.toJD() < q.toJD()) {
          for (
            p = (d && 1 === d.compareTo(p) ? d : p).year(),
              q = (e && e.compareTo(q) === -1 ? e : q).year(),
              r = Math.floor((q - p) / 2),
              (!d || d.year() < p) && t(p - r, a.options.earlierText),
              s = p;
            s <= q;
            s++
          )
            t(s);
          (!e || e.year() > q) && t(q + r, a.options.laterText);
        } else {
          for (
            p = (e && e.compareTo(p) === -1 ? e : p).year(),
              q = (d && 1 === d.compareTo(q) ? d : q).year(),
              r = Math.floor((p - q) / 2),
              (!e || e.year() > p) && t(p + r, a.options.earlierText),
              s = p;
            s >= q;
            s--
          )
            t(s);
          (!d || d.year() < q) && t(q - r, a.options.laterText);
        }
        j += "</select>";
      }
      return (i = i.replace(/\\x2F/, j));
    },
    _prepare: function (a, b) {
      var c = function (b, c) {
        for (;;) {
          var d = a.indexOf("{" + b + ":start}");
          if (d === -1) return;
          var e = a.substring(d).indexOf("{" + b + ":end}");
          e > -1 &&
            (a =
              a.substring(0, d) +
              (c ? a.substr(d + b.length + 8, e - b.length - 8) : "") +
              a.substring(d + e + b.length + 6));
        }
      };
      c("inline", b.inline), c("popup", !b.inline);
      for (var d = /\{l10n:([^\}]+)\}/, e = d.exec(a); e; )
        (a = a.replace(e[0], b.options[e[1]])), (e = d.exec(a));
      return a;
    },
  });
  var c = a.calendarsPicker;
  a(function () {
    a(document)
      .on("mousedown." + b, c._checkExternalClick)
      .on("resize." + b, function () {
        c.hide(c.curInst);
      });
  });
})(jQuery);

// ----------------------- 6.jquery.calendars.islamic.min.js  -----------------------  //
!(function (a) {
  "use strict";
  function b(a) {
    this.local = this.regionalOptions[a || ""] || this.regionalOptions[""];
  }
  (b.prototype = new a.calendars.baseCalendar()),
    a.extend(b.prototype, {
      name: "Islamic",
      jdEpoch: 1948439.5,
      daysPerMonth: [30, 29, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29],
      hasYearZero: !1,
      minMonth: 1,
      firstMonth: 1,
      minDay: 1,
      regionalOptions: {
        "": {
          name: "Islamic",
          epochs: ["BH", "AH"],
          monthNames: [
            "Muharram",
            "Safar",
            "Rabi' al-awwal",
            "Rabi' al-thani",
            "Jumada al-awwal",
            "Jumada al-thani",
            "Rajab",
            "Sha'aban",
            "Ramadan",
            "Shawwal",
            "Dhu al-Qi'dah",
            "Dhu al-Hijjah",
          ],
          monthNamesShort: [
            "Muh",
            "Saf",
            "Rab1",
            "Rab2",
            "Jum1",
            "Jum2",
            "Raj",
            "Sha'",
            "Ram",
            "Shaw",
            "DhuQ",
            "DhuH",
          ],
          dayNames: [
            "Yawm al-ahad",
            "Yawm al-ithnayn",
            "Yawm ath-thulaathaa'",
            "Yawm al-arbi'aa'",
            "Yawm al-khamīs",
            "Yawm al-jum'a",
            "Yawm as-sabt",
          ],
          dayNamesShort: ["Aha", "Ith", "Thu", "Arb", "Kha", "Jum", "Sab"],
          dayNamesMin: ["Ah", "It", "Th", "Ar", "Kh", "Ju", "Sa"],
          digits: null,
          dateFormat: "yyyy/mm/dd",
          firstDay: 6,
          isRTL: !1,
        },
      },
      leapYear: function (b) {
        var c = this._validate(
          b,
          this.minMonth,
          this.minDay,
          a.calendars.local.invalidYear
        );
        return (11 * c.year() + 14) % 30 < 11;
      },
      weekOfYear: function (a, b, c) {
        var d = this.newDate(a, b, c);
        return (
          d.add(-d.dayOfWeek(), "d"), Math.floor((d.dayOfYear() - 1) / 7) + 1
        );
      },
      daysInYear: function (a) {
        return this.leapYear(a) ? 355 : 354;
      },
      daysInMonth: function (b, c) {
        var d = this._validate(
          b,
          c,
          this.minDay,
          a.calendars.local.invalidMonth
        );
        return (
          this.daysPerMonth[d.month() - 1] +
          (12 === d.month() && this.leapYear(d.year()) ? 1 : 0)
        );
      },
      weekDay: function (a, b, c) {
        return 5 !== this.dayOfWeek(a, b, c);
      },
      toJD: function (b, c, d) {
        var e = this._validate(b, c, d, a.calendars.local.invalidDate);
        return (
          (b = e.year()),
          (c = e.month()),
          (d = e.day()),
          (b = b <= 0 ? b + 1 : b),
          d +
            Math.ceil(29.5 * (c - 1)) +
            354 * (b - 1) +
            Math.floor((3 + 11 * b) / 30) +
            this.jdEpoch -
            1
        );
      },
      fromJD: function (a) {
        a = Math.floor(a) + 0.5;
        var b = Math.floor((30 * (a - this.jdEpoch) + 10646) / 10631);
        b = b <= 0 ? b - 1 : b;
        var c = Math.min(
            12,
            Math.ceil((a - 29 - this.toJD(b, 1, 1)) / 29.5) + 1
          ),
          d = a - this.toJD(b, c, 1) + 1;
        return this.newDate(b, c, d);
      },
    }),
    (a.calendars.calendars.islamic = b);
})(jQuery);

// ----------------------- 7.jquery.calendars.islamic.min.js  -----------------------  //
(function ($) {
  "use strict";
  $.calendars.calendars.islamic.prototype.regionalOptions.ar = {
    name: "Islamic",
    epochs: ["BAM", "AM"],
    monthNames:
      "محرم_صفر_ربيع الأول_ربيع الثاني_جمادى الأول_جمادى الآخر_رجب_شعبان_رمضان_شوال_ذو القعدة_ذو الحجة".split(
        "_"
      ),
    monthNamesShort:
      "محرم_صفر_ربيع1_ربيع2_جمادى1_جمادى2_رجب_شعبان_رمضان_شوال_القعدة_الحجة".split(
        "_"
      ),
    dayNames: [
      "الأحد",
      "الإثنين",
      "الثلاثاء",
      "الأربعاء",
      "الخميس",
      "الجمعة",
      "السبت",
    ],
    dayNamesShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),
    dayNamesMin: "ح_ن_ث_ر_خ_ج_س".split("_"),
    digits: $.calendars.substituteDigits([
      "٠",
      "١",
      "٢",
      "٣",
      "٤",
      "٥",
      "٦",
      "٧",
      "٨",
      "٩",
    ]),
    dateFormat: "yyyy/mm/dd",
    firstDay: 1,
    isRTL: true,
  };
})(jQuery);

// ----------------------- 8.jquery.calendars.ummalqura.min.js  -----------------------  //
!function(a){"use strict";function b(a){this.local=this.regionalOptions[a||""]||this.regionalOptions[""]}b.prototype=new a.calendars.baseCalendar,a.extend(b.prototype,{name:"UmmAlQura",hasYearZero:!1,minMonth:1,firstMonth:1,minDay:1,regionalOptions:{"":{name:"Umm al-Qura",epochs:["BH","AH"],monthNames:["Al-Muharram","Safar","Rabi' al-awwal","Rabi' Al-Thani","Jumada Al-Awwal","Jumada Al-Thani","Rajab","Sha'aban","Ramadan","Shawwal","Dhu al-Qi'dah","Dhu al-Hijjah"],monthNamesShort:["Muh","Saf","Rab1","Rab2","Jum1","Jum2","Raj","Sha'","Ram","Shaw","DhuQ","DhuH"],dayNames:["Yawm al-Ahad","Yawm al-Ithnain","Yawm al-Thalāthā’","Yawm al-Arba‘ā’","Yawm al-Khamīs","Yawm al-Jum‘a","Yawm al-Sabt"],dayNamesShort:["Ahd","Ith","Thu","Arb","Khm","Jum","Sbt"],dayNamesMin:["Ah","Ith","Th","Ar","Kh","Ju","Sa"],digits:null,dateFormat:"yyyy/mm/dd",firstDay:6,isRTL:!0}},leapYear:function(b){var c=this._validate(b,this.minMonth,this.minDay,a.calendars.local.invalidYear);return 355===this.daysInYear(c.year())},weekOfYear:function(a,b,c){var d=this.newDate(a,b,c);return d.add(-d.dayOfWeek(),"d"),Math.floor((d.dayOfYear()-1)/7)+1},daysInYear:function(a){for(var b=0,c=1;c<=12;c++)b+=this.daysInMonth(a,c);return b},daysInMonth:function(b,d){for(var e=this._validate(b,d,this.minDay,a.calendars.local.invalidMonth),f=e.toJD()-24e5+.5,g=0,h=0;h<c.length;h++){if(c[h]>f)return c[g]-c[g-1];g++}return 30},weekDay:function(a,b,c){return 5!==this.dayOfWeek(a,b,c)},toJD:function(b,d,e){var f=this._validate(b,d,e,a.calendars.local.invalidDate),g=12*(f.year()-1)+f.month()-15292;return f.day()+c[g-1]-1+24e5-.5},fromJD:function(a){for(var b=a-24e5+.5,d=0,e=0;e<c.length&&!(c[e]>b);e++)d++;var f=d+15292,g=Math.floor((f-1)/12),h=g+1,i=f-12*g,j=b-c[d-1]+1;return this.newDate(h,i,j)},isValid:function(b,c,d){var e=a.calendars.baseCalendar.prototype.isValid.apply(this,arguments);return e&&(b=void 0!==b.year&&null!==b.year?b.year:b,e=b>=1276&&b<=1500),e},_validate:function(b,c,d,e){var f=a.calendars.baseCalendar.prototype._validate.apply(this,arguments);if(f.year<1276||f.year>1500)throw e.replace(/\{0\}/,this.local.name);return f}}),a.calendars.calendars.ummalqura=b;var c=[20,50,79,109,138,168,197,227,256,286,315,345,374,404,433,463,492,522,551,581,611,641,670,700,729,759,788,818,847,877,906,936,965,995,1024,1054,1083,1113,1142,1172,1201,1231,1260,1290,1320,1350,1379,1409,1438,1468,1497,1527,1556,1586,1615,1645,1674,1704,1733,1763,1792,1822,1851,1881,1910,1940,1969,1999,2028,2058,2087,2117,2146,2176,2205,2235,2264,2294,2323,2353,2383,2413,2442,2472,2501,2531,2560,2590,2619,2649,2678,2708,2737,2767,2796,2826,2855,2885,2914,2944,2973,3003,3032,3062,3091,3121,3150,3180,3209,3239,3268,3298,3327,3357,3386,3416,3446,3476,3505,3535,3564,3594,3623,3653,3682,3712,3741,3771,3800,3830,3859,3889,3918,3948,3977,4007,4036,4066,4095,4125,4155,4185,4214,4244,4273,4303,4332,4362,4391,4421,4450,4480,4509,4539,4568,4598,4627,4657,4686,4716,4745,4775,4804,4834,4863,4893,4922,4952,4981,5011,5040,5070,5099,5129,5158,5188,5218,5248,5277,5307,5336,5366,5395,5425,5454,5484,5513,5543,5572,5602,5631,5661,5690,5720,5749,5779,5808,5838,5867,5897,5926,5956,5985,6015,6044,6074,6103,6133,6162,6192,6221,6251,6281,6311,6340,6370,6399,6429,6458,6488,6517,6547,6576,6606,6635,6665,6694,6724,6753,6783,6812,6842,6871,6901,6930,6960,6989,7019,7048,7078,7107,7137,7166,7196,7225,7255,7284,7314,7344,7374,7403,7433,7462,7492,7521,7551,7580,7610,7639,7669,7698,7728,7757,7787,7816,7846,7875,7905,7934,7964,7993,8023,8053,8083,8112,8142,8171,8201,8230,8260,8289,8319,8348,8378,8407,8437,8466,8496,8525,8555,8584,8614,8643,8673,8702,8732,8761,8791,8821,8850,8880,8909,8938,8968,8997,9027,9056,9086,9115,9145,9175,9205,9234,9264,9293,9322,9352,9381,9410,9440,9470,9499,9529,9559,9589,9618,9648,9677,9706,9736,9765,9794,9824,9853,9883,9913,9943,9972,10002,10032,10061,10090,10120,10149,10178,10208,10237,10267,10297,10326,10356,10386,10415,10445,10474,10504,10533,10562,10592,10621,10651,10680,10710,10740,10770,10799,10829,10858,10888,10917,10947,10976,11005,11035,11064,11094,11124,11153,11183,11213,11242,11272,11301,11331,11360,11389,11419,11448,11478,11507,11537,11567,11596,11626,11655,11685,11715,11744,11774,11803,11832,11862,11891,11921,11950,11980,12010,12039,12069,12099,12128,12158,12187,12216,12246,12275,12304,12334,12364,12393,12423,12453,12483,12512,12542,12571,12600,12630,12659,12688,12718,12747,12777,12807,12837,12866,12896,12926,12955,12984,13014,13043,13072,13102,13131,13161,13191,13220,13250,13280,13310,13339,13368,13398,13427,13456,13486,13515,13545,13574,13604,13634,13664,13693,13723,13752,13782,13811,13840,13870,13899,13929,13958,13988,14018,14047,14077,14107,14136,14166,14195,14224,14254,14283,14313,14342,14372,14401,14431,14461,14490,14520,14550,14579,14609,14638,14667,14697,14726,14756,14785,14815,14844,14874,14904,14933,14963,14993,15021,15051,15081,15110,15140,15169,15199,15228,15258,15287,15317,15347,15377,15406,15436,15465,15494,15524,15553,15582,15612,15641,15671,15701,15731,15760,15790,15820,15849,15878,15908,15937,15966,15996,16025,16055,16085,16114,16144,16174,16204,16233,16262,16292,16321,16350,16380,16409,16439,16468,16498,16528,16558,16587,16617,16646,16676,16705,16734,16764,16793,16823,16852,16882,16912,16941,16971,17001,17030,17060,17089,17118,17148,17177,17207,17236,17266,17295,17325,17355,17384,17414,17444,17473,17502,17532,17561,17591,17620,17650,17679,17709,17738,17768,17798,17827,17857,17886,17916,17945,17975,18004,18034,18063,18093,18122,18152,18181,18211,18241,18270,18300,18330,18359,18388,18418,18447,18476,18506,18535,18565,18595,18625,18654,18684,18714,18743,18772,18802,18831,18860,18890,18919,18949,18979,19008,19038,19068,19098,19127,19156,19186,19215,19244,19274,19303,19333,19362,19392,19422,19452,19481,19511,19540,19570,19599,19628,19658,19687,19717,19746,19776,19806,19836,19865,19895,19924,19954,19983,20012,20042,20071,20101,20130,20160,20190,20219,20249,20279,20308,20338,20367,20396,20426,20455,20485,20514,20544,20573,20603,20633,20662,20692,20721,20751,20780,20810,20839,20869,20898,20928,20957,20987,21016,21046,21076,21105,21135,21164,21194,21223,21253,21282,21312,21341,21371,21400,21430,21459,21489,21519,21548,21578,21607,21637,21666,21696,21725,21754,21784,21813,21843,21873,21902,21932,21962,21991,22021,22050,22080,22109,22138,22168,22197,22227,22256,22286,22316,22346,22375,22405,22434,22464,22493,22522,22552,22581,22611,22640,22670,22700,22730,22759,22789,22818,22848,22877,22906,22936,22965,22994,23024,23054,23083,23113,23143,23173,23202,23232,23261,23290,23320,23349,23379,23408,23438,23467,23497,23527,23556,23586,23616,23645,23674,23704,23733,23763,23792,23822,23851,23881,23910,23940,23970,23999,24029,24058,24088,24117,24147,24176,24206,24235,24265,24294,24324,24353,24383,24413,24442,24472,24501,24531,24560,24590,24619,24648,24678,24707,24737,24767,24796,24826,24856,24885,24915,24944,24974,25003,25032,25062,25091,25121,25150,25180,25210,25240,25269,25299,25328,25358,25387,25416,25446,25475,25505,25534,25564,25594,25624,25653,25683,25712,25742,25771,25800,25830,25859,25888,25918,25948,25977,26007,26037,26067,26096,26126,26155,26184,26214,26243,26272,26302,26332,26361,26391,26421,26451,26480,26510,26539,26568,26598,26627,26656,26686,26715,26745,26775,26805,26834,26864,26893,26923,26952,26982,27011,27041,27070,27099,27129,27159,27188,27218,27248,27277,27307,27336,27366,27395,27425,27454,27484,27513,27542,27572,27602,27631,27661,27691,27720,27750,27779,27809,27838,27868,27897,27926,27956,27985,28015,28045,28074,28104,28134,28163,28193,28222,28252,28281,28310,28340,28369,28399,28428,28458,28488,28517,28547,28577,28607,28636,28665,28695,28724,28754,28783,28813,28843,28872,28901,28931,28960,28990,29019,29049,29078,29108,29137,29167,29196,29226,29255,29285,29315,29345,29375,29404,29434,29463,29492,29522,29551,29580,29610,29640,29669,29699,29729,29759,29788,29818,29847,29876,29906,29935,29964,29994,30023,30053,30082,30112,30141,30171,30200,30230,30259,30289,30318,30348,30378,30408,30437,30467,30496,30526,30555,30585,30614,30644,30673,30703,30732,30762,30791,30821,30850,30880,30909,30939,30968,30998,31027,31057,31086,31116,31145,31175,31204,31234,31263,31293,31322,31352,31381,31411,31441,31471,31500,31530,31559,31589,31618,31648,31676,31706,31736,31766,31795,31825,31854,31884,31913,31943,31972,32002,32031,32061,32090,32120,32150,32180,32209,32239,32268,32298,32327,32357,32386,32416,32445,32475,32504,32534,32563,32593,32622,32652,32681,32711,32740,32770,32799,32829,32858,32888,32917,32947,32976,33006,33035,33065,33094,33124,33153,33183,33213,33243,33272,33302,33331,33361,33390,33420,33450,33479,33509,33539,33568,33598,33627,33657,33686,33716,33745,33775,33804,33834,33863,33893,33922,33952,33981,34011,34040,34069,34099,34128,34158,34187,34217,34247,34277,34306,34336,34365,34395,34424,34454,34483,34512,34542,34571,34601,34631,34660,34690,34719,34749,34778,34808,34837,34867,34896,34926,34955,34985,35015,35044,35074,35103,35133,35162,35192,35222,35251,35280,35310,35340,35370,35399,35429,35458,35488,35517,35547,35576,35605,35635,35665,35694,35723,35753,35782,35811,35841,35871,35901,35930,35960,35989,36019,36048,36078,36107,36136,36166,36195,36225,36254,36284,36314,36343,36373,36403,36433,36462,36492,36521,36551,36580,36610,36639,36669,36698,36728,36757,36786,36816,36845,36875,36904,36934,36963,36993,37022,37052,37081,37111,37141,37170,37200,37229,37259,37288,37318,37347,37377,37406,37436,37465,37495,37524,37554,37584,37613,37643,37672,37701,37731,37760,37790,37819,37849,37878,37908,37938,37967,37997,38027,38056,38085,38115,38144,38174,38203,38233,38262,38292,38322,38351,38381,38410,38440,38469,38499,38528,38558,38587,38617,38646,38676,38705,38735,38764,38794,38823,38853,38882,38912,38941,38971,39001,39030,39059,39089,39118,39148,39178,39208,39237,39267,39297,39326,39355,39385,39414,39444,39473,39503,39532,39562,39592,39621,39650,39680,39709,39739,39768,39798,39827,39857,39886,39916,39946,39975,40005,40035,40064,40094,40123,40153,40182,40212,40241,40271,40300,40330,40359,40389,40418,40448,40477,40507,40536,40566,40595,40625,40655,40685,40714,40744,40773,40803,40832,40862,40892,40921,40951,40980,41009,41039,41068,41098,41127,41157,41186,41216,41245,41275,41304,41334,41364,41393,41422,41452,41481,41511,41540,41570,41599,41629,41658,41688,41718,41748,41777,41807,41836,41865,41894,41924,41953,41983,42012,42042,42072,42102,42131,42161,42190,42220,42249,42279,42308,42337,42367,42397,42426,42456,42485,42515,42545,42574,42604,42633,42662,42692,42721,42751,42780,42810,42839,42869,42899,42929,42958,42988,43017,43046,43076,43105,43135,43164,43194,43223,43253,43283,43312,43342,43371,43401,43430,43460,43489,43519,43548,43578,43607,43637,43666,43696,43726,43755,43785,43814,43844,43873,43903,43932,43962,43991,44021,44050,44080,44109,44139,44169,44198,44228,44258,44287,44317,44346,44375,44405,44434,44464,44493,44523,44553,44582,44612,44641,44671,44700,44730,44759,44788,44818,44847,44877,44906,44936,44966,44996,45025,45055,45084,45114,45143,45172,45202,45231,45261,45290,45320,45350,45380,45409,45439,45468,45498,45527,45556,45586,45615,45644,45674,45704,45733,45763,45793,45823,45852,45882,45911,45940,45970,45999,46028,46058,46088,46117,46147,46177,46206,46236,46265,46295,46324,46354,46383,46413,46442,46472,46501,46531,46560,46590,46620,46649,46679,46708,46738,46767,46797,46826,46856,46885,46915,46944,46974,47003,47033,47063,47092,47122,47151,47181,47210,47240,47269,47298,47328,47357,47387,47417,47446,47476,47506,47535,47565,47594,47624,47653,47682,47712,47741,47771,47800,47830,47860,47890,47919,47949,47978,48008,48037,48066,48096,48125,48155,48184,48214,48244,48273,48303,48333,48362,48392,48421,48450,48480,48509,48538,48568,48598,48627,48657,48687,48717,48746,48776,48805,48834,48864,48893,48922,48952,48982,49011,49041,49071,49100,49130,49160,49189,49218,49248,49277,49306,49336,49365,49395,49425,49455,49484,49514,49543,49573,49602,49632,49661,49690,49720,49749,49779,49809,49838,49868,49898,49927,49957,49986,50016,50045,50075,50104,50133,50163,50192,50222,50252,50281,50311,50340,50370,50400,50429,50459,50488,50518,50547,50576,50606,50635,50665,50694,50724,50754,50784,50813,50843,50872,50902,50931,50960,50990,51019,51049,51078,51108,51138,51167,51197,51227,51256,51286,51315,51345,51374,51403,51433,51462,51492,51522,51552,51582,51611,51641,51670,51699,51729,51758,51787,51816,51846,51876,51906,51936,51965,51995,52025,52054,52083,52113,52142,52171,52200,52230,52260,52290,52319,52349,52379,52408,52438,52467,52497,52526,52555,52585,52614,52644,52673,52703,52733,52762,52792,52822,52851,52881,52910,52939,52969,52998,53028,53057,53087,53116,53146,53176,53205,53235,53264,53294,53324,53353,53383,53412,53441,53471,53500,53530,53559,53589,53619,53648,53678,53708,53737,53767,53796,53825,53855,53884,53914,53943,53973,54003,54032,54062,54092,54121,54151,54180,54209,54239,54268,54297,54327,54357,54387,54416,54446,54476,54505,54535,54564,54593,54623,54652,54681,54711,54741,54770,54800,54830,54859,54889,54919,54948,54977,55007,55036,55066,55095,55125,55154,55184,55213,55243,55273,55302,55332,55361,55391,55420,55450,55479,55508,55538,55567,55597,55627,55657,55686,55716,55745,55775,55804,55834,55863,55892,55922,55951,55981,56011,56040,56070,56100,56129,56159,56188,56218,56247,56276,56306,56335,56365,56394,56424,56454,56483,56513,56543,56572,56601,56631,56660,56690,56719,56749,56778,56808,56837,56867,56897,56926,56956,56985,57015,57044,57074,57103,57133,57162,57192,57221,57251,57280,57310,57340,57369,57399,57429,57458,57487,57517,57546,57576,57605,57634,57664,57694,57723,57753,57783,57813,57842,57871,57901,57930,57959,57989,58018,58048,58077,58107,58137,58167,58196,58226,58255,58285,58314,58343,58373,58402,58432,58461,58491,58521,58551,58580,58610,58639,58669,58698,58727,58757,58786,58816,58845,58875,58905,58934,58964,58994,59023,59053,59082,59111,59141,59170,59200,59229,59259,59288,59318,59348,59377,59407,59436,59466,59495,59525,59554,59584,59613,59643,59672,59702,59731,59761,59791,59820,59850,59879,59909,59939,59968,59997,60027,60056,60086,60115,60145,60174,60204,60234,60264,60293,60323,60352,60381,60411,60440,60469,60499,60528,60558,60588,60618,60647,60677,60707,60736,60765,60795,60824,60853,60883,60912,60942,60972,61002,61031,61061,61090,61120,61149,61179,61208,61237,61267,61296,61326,61356,61385,61415,61445,61474,61504,61533,61563,61592,61621,61651,61680,61710,61739,61769,61799,61828,61858,61888,61917,61947,61976,62006,62035,62064,62094,62123,62153,62182,62212,62242,62271,62301,62331,62360,62390,62419,62448,62478,62507,62537,62566,62596,62625,62655,62685,62715,62744,62774,62803,62832,62862,62891,62921,62950,62980,63009,63039,63069,63099,63128,63157,63187,63216,63246,63275,63305,63334,63363,63393,63423,63453,63482,63512,63541,63571,63600,63630,63659,63689,63718,63747,63777,63807,63836,63866,63895,63925,63955,63984,64014,64043,64073,64102,64131,64161,64190,64220,64249,64279,64309,64339,64368,64398,64427,64457,64486,64515,64545,64574,64603,64633,64663,64692,64722,64752,64782,64811,64841,64870,64899,64929,64958,64987,65017,65047,65076,65106,65136,65166,65195,65225,65254,65283,65313,65342,65371,65401,65431,65460,65490,65520,65549,65579,65608,65638,65667,65697,65726,65755,65785,65815,65844,65874,65903,65933,65963,65992,66022,66051,66081,66110,66140,66169,66199,66228,66258,66287,66317,66346,66376,66405,66435,66465,66494,66524,66553,66583,66612,66641,66671,66700,66730,66760,66789,66819,66849,66878,66908,66937,66967,66996,67025,67055,67084,67114,67143,67173,67203,67233,67262,67292,67321,67351,67380,67409,67439,67468,67497,67527,67557,67587,67617,67646,67676,67705,67735,67764,67793,67823,67852,67882,67911,67941,67971,68e3,68030,68060,68089,68119,68148,68177,68207,68236,68266,68295,68325,68354,68384,68414,68443,68473,68502,68532,68561,68591,68620,68650,68679,68708,68738,68768,68797,68827,68857,68886,68916,68946,68975,69004,69034,69063,69092,69122,69152,69181,69211,69240,69270,69300,69330,69359,69388,69418,69447,69476,69506,69535,69565,69595,69624,69654,69684,69713,69743,69772,69802,69831,69861,69890,69919,69949,69978,70008,70038,70067,70097,70126,70156,70186,70215,70245,70274,70303,70333,70362,70392,70421,70451,70481,70510,70540,70570,70599,70629,70658,70687,70717,70746,70776,70805,70835,70864,70894,70924,70954,70983,71013,71042,71071,71101,71130,71159,71189,71218,71248,71278,71308,71337,71367,71397,71426,71455,71485,71514,71543,71573,71602,71632,71662,71691,71721,71751,71781,71810,71839,71869,71898,71927,71957,71986,72016,72046,72075,72105,72135,72164,72194,72223,72253,72282,72311,72341,72370,72400,72429,72459,72489,72518,72548,72577,72607,72637,72666,72695,72725,72754,72784,72813,72843,72872,72902,72931,72961,72991,73020,73050,73080,73109,73139,73168,73197,73227,73256,73286,73315,73345,73375,73404,73434,73464,73493,73523,73552,73581,73611,73640,73669,73699,73729,73758,73788,73818,73848,73877,73907,73936,73965,73995,74024,74053,74083,74113,74142,74172,74202,74231,74261,74291,74320,74349,74379,74408,74437,74467,74497,74526,74556,74585,74615,74645,74675,74704,74733,74763,74792,74822,74851,74881,74910,74940,74969,74999,75029,75058,75088,75117,75147,75176,75206,75235,75264,75294,75323,75353,75383,75412,75442,75472,75501,75531,75560,75590,75619,75648,75678,75707,75737,75766,75796,75826,75856,75885,75915,75944,75974,76003,76032,76062,76091,76121,76150,76180,76210,76239,76269,76299,76328,76358,76387,76416,76446,76475,76505,76534,76564,76593,76623,76653,76682,76712,76741,76771,76801,76830,76859,76889,76918,76948,76977,77007,77036,77066,77096,77125,77155,77185,77214,77243,77273,77302,77332,77361,77390,77420,77450,77479,77509,77539,77569,77598,77627,77657,77686,77715,77745,77774,77804,77833,77863,77893,77923,77952,77982,78011,78041,78070,78099,78129,78158,78188,78217,78247,78277,78307,78336,78366,78395,78425,78454,78483,78513,78542,78572,78601,78631,78661,78690,78720,78750,78779,78808,78838,78867,78897,78926,78956,78985,79015,79044,79074,79104,79133,79163,79192,79222,79251,79281,79310,79340,79369,79399,79428,79458,79487,79517,79546,79576,79606,79635,79665,79695,79724,79753,79783,79812,79841,79871,79900,79930,79960,79990]}(jQuery);
//# sourceMappingURL=jquery.calendars.ummalqura.min.map
// ----------------------- 9.jquery.calendars.ummalqura-ar.js  -----------------------  //
(function ($) {
  "use strict";
  $.calendars.calendars.ummalqura.prototype.regionalOptions.ar = {
    name: "UmmAlQura", // The calendar name
    epochs: ["BAM", "AM"],
    monthNames:
      "محرم_صفر_ربيع الأول_ربيع الثاني_جمادى الأول_جمادى الآخر_رجب_شعبان_رمضان_شوال_ذو القعدة_ذو الحجة".split(
        "_"
      ),
    monthNamesShort:
      "محرم_صفر_ربيع1_ربيع2_جمادى1_جمادى2_رجب_شعبان_رمضان_شوال_القعدة_الحجة".split(
        "_"
      ),
    dayNames: [
      "الأحد",
      "الإثنين",
      "الثلاثاء",
      "الأربعاء",
      "الخميس",
      "الجمعة",
      "السبت",
    ],
    dayNamesShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),
    dayNamesMin: ["أحد", "إثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"],
    digits: $.calendars.substituteDigits([
      "٠",
      "١",
      "٢",
      "٣",
      "٤",
      "٥",
      "٦",
      "٧",
      "٨",
      "٩",
    ]),
    dateFormat: "yyyy/mm/dd",
    firstDay: 6,
    isRTL: true,
  };
})(jQuery);
